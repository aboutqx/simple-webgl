(window.webpackJsonp=window.webpackJsonp||[]).push([[2,8],{44:function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));var r=n(0);class o{constructor(t,e){this._mesh=t,this._shader=e}draw(t){this._shader.bind(),this._shader.style(t),r.a.draw(this._mesh)}get mesh(){return this._mesh}get shader(){return this._shader}}},45:function(t,e,n){"use strict";var r=n(0),o=n(3);let a,s;e.a=class{constructor(t,e,n={},o=1){a=!window.useWebgl2&&r.c.getExtension("WEBGL_depth_texture"),this.width=t||r.b.width,this.height=e||r.b.height,this._numTargets=o,this._multipleTargets=o>1,1==n.hdr?this._parameters={internalFormat:r.c.RGBA16F,type:r.c.HALF_FLOAT,minFilter:n.minFilter,maxFilter:n.magFilter}:this._parameters=n,window.useWebgl2||(s=r.c.getExtension("WEBGL_draw_buffers")),this._multipleTargets&&this._checkMaxNumRenderTarget(),this._init()}_init(){if(this._initTextures(),this.frameBuffer=r.c.createFramebuffer(),r.c.bindFramebuffer(r.c.FRAMEBUFFER,this.frameBuffer),window.useWebgl2){if(0===this._numTargets)r.c.readBuffer(r.c.NONE),r.c.drawBuffers([r.c.NONE]);else{const t=[];for(let e=0;e<this._numTargets;e++)r.c.framebufferTexture2D(r.c.DRAW_FRAMEBUFFER,r.c.COLOR_ATTACHMENT0+e,r.c.TEXTURE_2D,this._textures[e].texture,0),t.push(r.c["COLOR_ATTACHMENT"+e]);r.c.drawBuffers(t)}r.c.framebufferTexture2D(r.c.DRAW_FRAMEBUFFER,r.c.DEPTH_ATTACHMENT,r.c.TEXTURE_2D,this.glDepthTexture.texture,0)}else{for(let t=0;t<this._numTargets;t++)r.c.framebufferTexture2D(r.c.FRAMEBUFFER,r.c.COLOR_ATTACHMENT0+t,r.c.TEXTURE_2D,this._textures[t].texture,0);if(this._multipleTargets){const t=[];for(let e=0;e<this._numTargets;e++)t.push(s[`COLOR_ATTACHMENT${e}_WEBGL`]);s.drawBuffersWEBGL(t)}a&&r.c.framebufferTexture2D(r.c.FRAMEBUFFER,r.c.DEPTH_ATTACHMENT,r.c.TEXTURE_2D,this.glDepthTexture.texture,0)}r.c.checkFramebufferStatus(r.c.FRAMEBUFFER)!=r.c.FRAMEBUFFER_COMPLETE&&console.log("gl.checkFramebufferStatus() returned "+status.toString(16)),r.c.bindTexture(r.c.TEXTURE_2D,null),r.c.bindRenderbuffer(r.c.RENDERBUFFER,null),r.c.bindFramebuffer(r.c.FRAMEBUFFER,null),this.clear()}_checkMaxNumRenderTarget(){const t=window.useWebgl2?r.c.getParameter(r.c.MAX_DRAW_BUFFERS):r.c.getParameter(s.MAX_DRAW_BUFFERS_WEBGL);this._numTargets>t&&(console.error("Over max number of draw buffers supported : ",t),this._numTargets=t)}_initTextures(){this._textures=[];for(let t=0;t<this._numTargets;t++){const t=this._createTexture();this._textures.push(t)}window.useWebgl2?this.glDepthTexture=this._createTexture(r.c.DEPTH_COMPONENT16,r.c.UNSIGNED_SHORT,r.c.DEPTH_COMPONENT,{minFilter:r.c.NEAREST,magFilter:r.c.NEAREST}):this.glDepthTexture=this._createTexture(r.c.DEPTH_COMPONENT,r.c.UNSIGNED_SHORT,r.c.DEPTH_COMPONENT,{minFilter:r.c.LINEAR})}_createTexture(t,e,n,a={}){const s=Object.assign({},this._parameters);s.internalFormat=t||s.internalFormat,s.format=n||s.format||r.c.RGBA,s.type=e||s.type||r.c.UNSIGNED_BYTE;for(const t in a)s[t]=a[t];return new o.a(null,s,this.width,this.height)}bind(t=!0){t&&r.c.viewport(0,0,this.width,this.height),r.c.bindFramebuffer(r.c.FRAMEBUFFER,this.frameBuffer),r.a.clear(0,0,0,1)}unbind(t=!0){t&&r.c.viewport(0,0,r.b.width,r.b.height),r.c.bindFramebuffer(r.c.FRAMEBUFFER,null),this._textures.forEach(t=>{t.generateMipmap()})}clear(t=0,e=0,n=0,o=0){this.bind(),r.a.clear(t,e,n,o),this.unbind()}get textures(){return this._textures}getTexture(t=0){return this._textures[t]}get depthTexture(){return this.glDepthTexture}get minFilter(){return this._textures[0].minFilter}set minFilter(t){this._textures.forEach(e=>{e.minFilter=t})}get magFilter(){return this._textures[0].magFilter}set magFilter(t){this._textures.forEach(e=>{e.magFilter=t})}get wrapS(){return this._textures[0].wrapS}set wrapS(t){this._textures.forEach(e=>{e.wrapS=t})}get wrapT(){return this._textures[0].wrapT}set wrapT(t){this._textures.forEach(e=>{e.wrapT=t})}showParameters(){this._textures[0].showParameters()}get numTargets(){return this._numTargets}}},46:function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var r=n(13),o=n(15),a=n(42),s=n(44);class i extends s.a{constructor(t){const e=new o.a(r.c,t);super(a.a.bigTriangle(),e)}draw(t){super.draw(t)}}},47:function(t,e,n){function r(){this._normal=null}r.prototype={constructor:r,get seed(){return this._seed},set seed(t){this.constructor.call(this,t)},next:function(){return 0|255*this.uniform()},random:function(){return this.uniform()},uniform:function(){return Math.random()},normal:function(){var t,e;if(null!=this._normal){var n=this._normal;return this._normal=null,n}return t=this.uniform()||Math.pow(2,-53),t=Math.sqrt(-2*Math.log(t)),e=2*Math.PI*this.uniform(),this._normal=t*Math.sin(e),t*Math.cos(e)},range:function(t,e){return null==t?this.uniform():(null==e&&(e=t,t=0),t+Math.floor(this.uniform()*(e-t)))},exp:function(){return-Math.log(this.uniform()||Math.pow(2,-53))},poisson:function(t){for(var e=Math.exp(-(t||1)),n=0,r=1;r>e;)r*=this.uniform(),n++;return n-1},gamma:function(t){var e,n,r,o,a;for(e=(t<1?1+t:t)-1/3,n=1/Math.sqrt(9*e);;){for(;r=this.normal(),!((a=Math.pow(1+n*r,3))>0););if((o=this.uniform())>=1-.331*Math.pow(r,4)&&Math.log(o)>=.5*Math.pow(r,2)+e*(1-a+Math.log(a)))break}return t>1?e*a:e*a*Math.exp(this.exp()/-t)}},t.exports=r,r.MT=n(63),r.PM=n(64),r.XOR=n(65)},54:function(t,e,n){"use strict";var r=n(42),o=n(15),a=n(44);class s extends a.a{constructor(t=50,e="#version 300 es\n// sky.frag\n#define SHADER_NAME SKY_FRAGMENT\n\nprecision highp float;\n#define GLSLIFY 1\n\nin vec3 vPosition;\nin vec2 vTexCoord;\nuniform sampler2D texture0;\nout vec4 FragColor;\nuniform vec3 uFogColor;\n\nfloat contrast(float mValue, float mScale, float mMidPoint) {\n\treturn clamp( (mValue - mMidPoint) * mScale + mMidPoint, 0.0, 1.0);\n}\n\nfloat contrast(float mValue, float mScale) {\n\treturn contrast(mValue,  mScale, .5);\n}\n\nvec3 contrast(vec3 mValue, float mScale, float mMidPoint) {\n\treturn vec3( contrast(mValue.r, mScale, mMidPoint), contrast(mValue.g, mScale, mMidPoint), contrast(mValue.b, mScale, mMidPoint) );\n}\n\nvec3 contrast(vec3 mValue, float mScale) {\n\treturn contrast(mValue, mScale, .5);\n}\n\nfloat fogFactorExp2(const float dist, const float density) {\n\tconst float LOG2 = -1.442695;\n\tfloat d = density * dist;\n\treturn 1.0 - clamp(exp2(d * d * LOG2), 0.0, 1.0);\n}\n\n#define FOG_DENSITY 0.0001\n\nvoid main(void) {\n    \n     vec3 color = texture(texture0, vTexCoord).rgb;\n    // color = contrast(color, 1.) * 1.2;\n\n    //sky fog only has a y direction change\n    float fogDistance = gl_FragCoord.z / gl_FragCoord.w;\n\tfloat fogAmount = fogFactorExp2(fogDistance, FOG_DENSITY);\n\n\tfloat offset = smoothstep(5., 1., vPosition.y);\n\tcolor.rgb = mix(color.rgb, uFogColor, offset );\n\n    // float grey = (color.r + color.g + color.b) / 3.0;\n\t// color.rgb = mix(color.rgb, vec3(grey), 0.5);\n\n    FragColor = vec4(color , 1.);\n}\n",n=24){super(r.a.sphere(t,n,!0),new o.a("#version 300 es\n// sky.vert\n\nprecision highp float;\n#define GLSLIFY 1\nin vec3 position;\nin vec2 texCoord;\nin vec3 normal;\n\nuniform mat4 uModelMatrix;\nuniform mat4 uViewMatrix;\nuniform mat4 uProjectionMatrix;\n\nout vec2 vTexCoord;\nout vec3 vNormal;\nout vec3 vPosition;\n\nvoid main(void) {\n\tmat4 matView = uViewMatrix;\n\t// cancle camera position x,y,z move effect\n\tmatView[3][0] = 0.0;\n\tmatView[3][1] = 0.0;\n\tmatView[3][2] = 0.0;\n\t\n    vec4 pos = uModelMatrix * vec4(position, 1.0);\n\tgl_Position = uProjectionMatrix * matView * pos;\n    vTexCoord = texCoord;\n    vNormal = normal;\n\tvPosition = position;\n}",e))}draw(t){this.shader.bind(),this.shader.style(t),super.draw()}}e.a=s},56:function(t,e,n){"use strict";n.r(e),n.d(e,"generateRandomSeed",(function(){return s})),n.d(e,"hashcode",(function(){return i})),n.d(e,"rand",(function(){return c})),n.d(e,"geneStarTexture",(function(){return u})),n.d(e,"starTexture",(function(){return f})),n.d(e,"geneNoiseTexture",(function(){return h})),n.d(e,"nebulaParams",(function(){return d}));var r=n(3),o=n(0);const a=n(47);function s(){return(1e18*Math.random()).toString(36)}function i(t){for(var e=0,n=0;n<t.length;n++){e+=(n+1)*t.charCodeAt(n)}return e}function c(t,e){return new a.MT(i(t)+e)}let l;function u(t,e,n,a){const i=s();l=i;const u=c(i,0),f=u.random.bind(u),m=Math.round(t*e*n),h=new Uint8Array(t*e*3);for(let n=0;n<m;n++){let n=Math.floor(f()*t*e),r=Math.round(255*Math.log(1-f())*-a);h[3*n+0]=r,h[3*n+1]=r,h[3*n+2]=r}return new r.a(h,{format:o.c.RGB},t,e)}const f=(t,e,n=.05,r=.125)=>u(t,e,n,r);function m(t,e){e=e||1;var n=2*Math.random()*Math.PI;return t[0]=Math.cos(n)*e,t[1]=Math.sin(n)*e,t}function h(t){let e=t*t*2,n=new Uint8Array(e);for(let t=0;t<e;t++){let e=m([]);n[2*t+0]=Math.round(.5*(1+e[0])*255),n[2*t+1]=Math.round(.5*(1+e[1])*255)}return new r.a(n,{format:o.c.LUMINANCE_ALPHA,wrapS:o.c.REPEAT,wrapT:o.c.REPEAT},t,t)}const p=h(1024),d=()=>{const t=c(l,1e3),e=Math.max(o.b.width,o.b.height);let n=Math.round(4*t.random()+1);return console.log(n,t.random()),{tNoise:p,tNoiseSize:1024,offset:[100*t.random(),100*t.random()],scale:(2*t.random()+1)/e,color:[t.random(),t.random(),t.random()],density:.2*t.random(),falloff:2*t.random()+3}}},63:function(t,e,n){!function(){t.exports=r;var e=n(47);function r(t){e.call(this),this._index=0,this._state=new Array(624),this._state[0]=null!=t?t:4294967295*Math.random()|0,this._seed=this._state[0];var n,r=this._state;for(n=1;n<624;n++)r[n]=r[n-1]^r[n-1]>>>30,r[n]=1812433253*r[n]+n,r[n]=r[n]&(r[n]<<32)-1}var o=r.prototype=Object.create(e.prototype);o.constructor=r,o._generateNumbers=function(){var t,e,n=this._state;for(t=0;t<624;t++)e=2147483648&n[t],e+=2147483647&n[(t+1)%624],n[t]=n[(t+397)%624]^e>>>1,e%2!=0&&(n[t]=2567483615^n[t])},o.uniform=function(){0===this._index&&this._generateNumbers();var t=this._state[this._index];return t^=t>>>11,t^=t<<7&2636928640,t^=t<<15&4022730752,t^=t>>>18,this._index=(this._index+1)%624,1/4294967296*(t>>>0)}}()},64:function(t,e,n){!function(){t.exports=r;var e=n(47);function r(t){e.call(this),this._seed=null!=t?t:1}var o=r.prototype=Object.create(e.prototype);o.constructor=r,o.uniform=function(){var t=16807*(this._seed>>16),e=16807*(65535&this._seed)+((32767&t)<<16)+(t>>15);return this._seed=e>2147483647?e-2147483647:e,this._seed/2147483647}}()},65:function(t,e,n){!function(){t.exports=r;var e=n(47);function r(t,n,r,o){e.call(this),this.x=null!=t?t:this.x,this.y=null!=n?n:this.y,this.z=null!=r?r:this.z,this.w=null!=o?o:this.w}var o=r.prototype=Object.create(e.prototype);o.constructor=r,o.x=123456789,o.y=362436069,o.z=521288629,o.w=88675123,o.uniform=function(){var t=this.x^this.x<<11;return this.x=this.y,this.y=this.z,this.z=this.w,this.w=this.w^this.w>>19^t^t>>8,this.w/2147483647}}()},70:function(t,e,n){"use strict";var r=n(45);var o=class{constructor(t,e,n,o={},a=1){this._fbos=[];for(let s=0;s<t;s++){const t=new r.a(e,n,o,a);this._fbos.push(t)}}swap(){const t=this._fbos.shift();this._fbos.push(t)}get read(){return this._fbos[this._fbos.length-1]}get write(){return this._fbos[0]}get all(){return this._fbos}};e.a=class extends o{constructor(t,e,n={},r=1){super(2,t,e,n,r)}pingpong(t,e,n,r,o){}}},92:function(t,e,n){"use strict";n.r(e),n.d(e,"default",(function(){return d}));var r=n(2),o=n(43),a=n(45),s=n(0),i=n(46),c=n(55),l=n(54),u=n(1),f=n(56),m=n(70);function h(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function p(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?h(Object(n),!0).forEach((function(e){Object(r.a)(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):h(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}class d extends o.a{constructor(){super(),Object(r.a)(this,"_speed",new c.a(.01,.005))}init(){this.terrainPrg=this.basicVert("#version 300 es\n// terrain.frag\n\nprecision highp float;\n#define GLSLIFY 1\n\nuniform sampler2D \tuAoMap;\nuniform sampler2D \tuNoiseMap;\nuniform samplerCube uRadianceMap;\nuniform samplerCube uIrradianceMap;\n\nuniform vec3\t\tuBaseColor;\nuniform float\t\tuRoughness;\nuniform float\t\tuMetallic;\nuniform float\t\tuSpecular;\nuniform float \t\tuFogOffset;\nuniform float\t\tuExposure;\nuniform float\t\tuGamma;\nuniform float\t\tuFogDensity;\nuniform vec3 \t\tuFogColor;\nuniform float \t\tuOffset;\nuniform vec3        uCameraPos;\n\nin \t\tvec3\t\tvNormal;\nin \t\tvec3        vPosition;\nin \t\tvec2 \t\tvTexCoord;\nin \t\tvec4 \t\tvViewSpacePosition;\nout \tvec4 \t\tFragColor;\n\n#define saturate(x) clamp(x, 0.0, 1.0)\n#define PI 3.1415926535897932384626433832795\n\n// Filmic tonemapping from\n// http://filmicgames.com/archives/75\n\nconst float A = 0.15;\nconst float B = 0.50;\nconst float C = 0.10;\nconst float D = 0.20;\nconst float E = 0.02;\nconst float F = 0.30;\n\nvec3 Uncharted2Tonemap( vec3 x )\n{\n\treturn ((x*(A*x+C*B)+D*E)/(x*(A*x+B)+D*F))-E/F;\n}\n\n// https://www.unrealengine.com/blog/physically-based-shading-on-mobile\nvec3 EnvBRDFApprox( vec3 SpecularColor, float Roughness, float NoV )\n{\n\tconst vec4 c0 = vec4( -1, -0.0275, -0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, -0.04 );\n\tvec4 r = Roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( -9.28 * NoV ) ) * r.x + r.y;\n\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\n\treturn SpecularColor * AB.x + AB.y;\n}\n\n// http://the-witness.net/news/2012/02/seamless-cube-map-filtering/\nvec3 fix_cube_lookup( vec3 v, float cube_size, float lod ) {\n\tfloat M = max(max(abs(v.x), abs(v.y)), abs(v.z));\n\tfloat scale = 1.0 - exp2(lod) / cube_size;\n\tif (abs(v.x) != M) v.x *= scale;\n\tif (abs(v.y) != M) v.y *= scale;\n\tif (abs(v.z) != M) v.z *= scale;\n\treturn v;\n}\n\nvec3 correctGamma(vec3 color, float g) {\n\treturn pow(color, vec3(1.0/g));\n}\n\nfloat fogFactorExp2(const float dist, const float density) {\n  const float LOG2 = -1.442695;\n  float d = density * dist;\n  return 1.0 - clamp(exp2(d * d * LOG2), 0.0, 1.0);\n}\n\nvec3 getPbr(vec3 N, vec3 V, vec3 baseColor, float roughness, float metallic, float specular) {\n\tvec3 diffuseColor\t= baseColor - baseColor * metallic;\n\tvec3 specularColor\t= mix( vec3( 0.08 * specular ), baseColor, specular );\t\n\n\tvec3 color;\n\tfloat roughness4 = pow(roughness, 4.0);\n\t\n\t// sample the pre-filtered cubemap at the corresponding mipmap level\n\tfloat numMips\t\t= 6.0;\n\tfloat mip\t\t\t= numMips - 1.0 + log2(roughness);\n\tvec3 lookup\t\t\t= -reflect( V, N );\n\tlookup\t\t\t\t= fix_cube_lookup( lookup, 512.0, mip );\n\tvec3 radiance\t\t= pow( textureLod( uRadianceMap, lookup, mip ).rgb, vec3( 2.2 ) );\n\tvec3 irradiance\t\t= pow( texture( uIrradianceMap, N ).rgb, vec3(2.2) );\n\t\n\t// get the approximate reflectance\n\tfloat NoV\t\t\t= saturate( dot( N, V ) );\n\tvec3 reflectance\t= EnvBRDFApprox( specularColor, roughness4, NoV );\n\t\n\t// combine the specular IBL and the BRDF\n    vec3 diffuse  \t\t= diffuseColor * irradiance;\n    vec3 _specular \t\t= radiance * reflectance;\n\tcolor\t\t\t\t= diffuse + _specular;\n\n\treturn color;\n}\n\nfloat getDiffuse(vec3 N, vec3 L) {\n\treturn max(dot(N, normalize(L)), 0.0);\n}\n\nvoid main() {\n\tvec3 noise \t\t\t= texture( uNoiseMap, vTexCoord* 5. ).rgb - .5;\n\tvec3 N \t\t\t\t= normalize( vNormal + noise * .06);\n\tvec3 V \t\t\t\t= normalize( uCameraPos - vPosition );\n\n\tvec3 color \t\t\t= getPbr(N, V, uBaseColor, uRoughness, uMetallic, uSpecular);\n\n\t\n\n\tvec3 ao = texture(uAoMap, vec2(vTexCoord.x, 1. - vTexCoord.y)).rgb;\n\tcolor.rgb *= ao;\n\n\t// apply the tone-mapping\n\tcolor\t\t\t\t= Uncharted2Tonemap( color * uExposure );\n\t// white balance\n\tcolor\t\t\t\t= color * ( 1.0 / Uncharted2Tonemap( vec3( 20.0 ) ) );\n\t\n\t// gamma correction\n\tcolor\t\t\t\t= pow( color, vec3( 1.0 / uGamma ) );\n\n\tfloat fogDistance = length(vViewSpacePosition);\n\tfloat fogAmount = fogFactorExp2(fogDistance, uFogDensity);\n\n\tcolor.rgb = mix(color.rgb, uFogColor, fogAmount+uFogOffset);\n\n\t\n\t// float grey = (color.r + color.g + color.b) / 3.0;\n\t// color.rgb = mix(color.rgb, vec3(grey), uOffset);\n\n    FragColor\t\t= vec4(color, 1.0 );\n\n}"),window.params={terrainSize:20,fogColor:[254/255,242/255,226/255]},this._vNoise=new i.a("#version 300 es\n// Author @patriciogv - 2015\n// Title: Mosaic\n\nprecision highp float;\n#define GLSLIFY 1\n\nin vec2 vTexCoord;\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float uTime;\nout vec4 FragColor;\n\nfloat frequency = 43758.5453123;\nfloat random (vec2 st) {\n    return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * frequency \n        );\n}\n\nvoid main() {\n    vec2 st = vTexCoord;\n\n    vec2 st0 = st * 19999.960; // Scale the coordinate system by 10\n    vec2 ipos = floor(st0);  // get the integer coords\n    vec2 fpos = fract(st0);  // get the fractional coords\n    \n    vec2 st1 = st * 99999.704; // Scale the coordinate system by 10\n    vec2 ipos1 = floor(st1);  // get the integer coords\n    vec2 fpos1 = fract(st1);  // get the fractional \n    \n    vec2 st2 = st * 99999.256; // Scale the coordinate system by 10\n    vec2 ipos2 = floor(st2);  // get the integer coords\n    vec2 fpos2 = fract(st2);  // get the fractional \n    // Assign a random value based on the integer coord\n    vec3 color = vec3(random( ipos ), random(ipos1), random(ipos2));\n    // vec3 color = vec3(random( st ), random(st), random(st));\n    // Uncomment to see the subdivided grid\n    //color = vec3(fpos,0.0);\n\n    FragColor = vec4(color * 3. , 1.0);\n}"),this._vNebula=new i.a("#version 300 es\nprecision highp float;\n#define GLSLIFY 1\nuniform sampler2D source, tNoise;\nuniform vec3 color;\nuniform vec2 offset;\nuniform float scale, density, falloff, tNoiseSize;\nin vec2 vTexCoord;\nout vec4 FragColor;\n\nfloat smootherstep(float a, float b, float r) {\n    r = clamp(r, 0.0, 1.0);\n    r = r*r * r*(r * (6.0 * r-15.0) + 10.0);\n    return mix(a, b, r);\n}\n\nfloat perlin_2d(vec2 p) {\n    vec2 p0 = floor(p);\n    vec2 p1 = p0 + vec2(1, 0);\n    vec2 p2 = p0 + vec2(1, 1);\n    vec2 p3 = p0 + vec2(0, 1);\n    vec2 d0 = texture(tNoise, p0 / tNoiseSize).ba;\n    vec2 d1 = texture(tNoise, p1 / tNoiseSize).ba;\n    vec2 d2 = texture(tNoise, p2 / tNoiseSize).ba;\n    vec2 d3 = texture(tNoise, p3 / tNoiseSize).ba;\n    d0 = 2.0 * d0 - 1.0;\n    d1 = 2.0 * d1 - 1.0;\n    d2 = 2.0 * d2 - 1.0;\n    d3 = 2.0 * d3 - 1.0;\n    vec2 p0p = p-p0;\n    vec2 p1p = p-p1;\n    vec2 p2p = p-p2;\n    vec2 p3p = p-p3;\n    float dp0 = dot(d0, p0p);\n    float dp1 = dot(d1, p1p);\n    float dp2 = dot(d2, p2p);\n    float dp3 = dot(d3, p3p);\n    float fx = p.x - p0.x;\n    float fy = p.y - p0.y;\n    float m01 = smootherstep(dp0, dp1, fx);\n    float m32 = smootherstep(dp3, dp2, fx);\n    float m01m32 = smootherstep(m01, m32, fy);\n    return m01m32;\n}\n\nfloat normalnoise(vec2 p) {\n    return perlin_2d(p) * 0.5 + 0.5;\n}\n\nfloat noise(vec2 p) {\n    p += offset;\n    const int steps = 5;\n    float scale = pow(2.0, float(steps));\n    float displace = 0.0;\n    for(int i = 0; i < steps; i ++ ) {\n        displace = smootherstep(.000000000001, 2., displace);\n        displace = normalnoise(p * scale + displace);\n        scale *= 0.5;\n    }\n    return normalnoise(p + displace);\n}\n\nvoid main() {\n    vec4 p = texture(source, vTexCoord);\n    float n = noise(gl_FragCoord.xy * scale * 1.);\n    n = pow(n + density, falloff);\n    FragColor = vec4(mix(p.rgb, color, n), 1);\n\n    // FragColor = vec4(vec3(normalnoise(gl_FragCoord.xy * scale * .01)), 1.);\n}")}_setGUI(){this.addPbrParams({gamma:2.2,exposure:2.5,metallic:0,roughness:.95,specular:.5,color:[77,76,73]}),this.addGUIParams({fogColor:[4,2,6]}),this.gui.addColor(this.params,"fogColor")}attrib(){params.terrainSize;this.terrain=getAssets.terrain,this.textureAo=getAssets.aoTerrain;const t=4096;this.addLabel("seed",()=>{this.starTetxure=f.starTexture(t,2048,.01,.26),this._prepareNebula()}),this.pingpongFbo=new m.a(t,2048)}prepare(){this.orbital.radius=22,this.orbital.rx.value=.3,this.orbital.ry.value=-.3,this.orbital.ry.limit(-.3,-.2),this.orbital.offset=[0,4,0];this._fboNoise=new a.a(512,512),s.a.srcBlend(),this.textureIrr=getAssets.irr,this.textureRad=getAssets.radiance,this.sky=new l.a(3*params.terrainSize,"#version 300 es\n// sky.frag\n#define SHADER_NAME SKY_FRAGMENT\n\nprecision highp float;\n#define GLSLIFY 1\n\nin vec3 vPosition;\nin vec2 vTexCoord;\nuniform sampler2D texture0;\nout vec4 FragColor;\nuniform vec3 uFogColor;\n\nfloat contrast(float mValue, float mScale, float mMidPoint) {\n\treturn clamp( (mValue - mMidPoint) * mScale + mMidPoint, 0.0, 1.0);\n}\n\nfloat contrast(float mValue, float mScale) {\n\treturn contrast(mValue,  mScale, .5);\n}\n\nvec3 contrast(vec3 mValue, float mScale, float mMidPoint) {\n\treturn vec3( contrast(mValue.r, mScale, mMidPoint), contrast(mValue.g, mScale, mMidPoint), contrast(mValue.b, mScale, mMidPoint) );\n}\n\nvec3 contrast(vec3 mValue, float mScale) {\n\treturn contrast(mValue, mScale, .5);\n}\n\nfloat fogFactorExp2(const float dist, const float density) {\n\tconst float LOG2 = -1.442695;\n\tfloat d = density * dist;\n\treturn 1.0 - clamp(exp2(d * d * LOG2), 0.0, 1.0);\n}\n\n#define FOG_DENSITY 0.0001\n\nvoid main(void) {\n    \n     vec3 color = texture(texture0, vTexCoord).rgb;\n    color = contrast(color, 1.) * 1.2;\n\n    //sky fog only has a y direction change\n    float fogDistance = gl_FragCoord.z / gl_FragCoord.w;\n\tfloat fogAmount = fogFactorExp2(fogDistance, FOG_DENSITY);\n\n\tfloat offset = smoothstep(5., 1., vPosition.y);\n\tcolor.rgb = mix(color.rgb, uFogColor, offset );\n\n    float grey = (color.r + color.g + color.b) / 3.0;\n\tcolor.rgb = mix(color.rgb, vec3(grey), 0.5);\n\n    FragColor = vec4(color , 1.);\n}\n"),s.a.clear(),this._fboNoise.bind(),s.a.clear(0,0,0,0),this._renderNoise(),this._fboNoise.unbind(),this._fboNoise.getTexture().wrapS=this._fboNoise.getTexture().wrapT=s.c.MIRRORED_REPEAT;this.starTetxure=f.starTexture(4096,2048,.01,.26),this._prepareNebula()}_prepareNebula(){for(let t=0;t<2;t++)this.pingpongFbo.write.bind(),s.a.clear(0,0,0,0),this._vNebula.draw(p({source:0==t?this.starTetxure:this.pingpongFbo.read.textures[0]},f.nebulaParams())),this.pingpongFbo.write.unbind(),this.pingpongFbo.swap()}_renderNoise(){this._vNoise.draw({})}_renderTerrain(t){const{metallic:e,specular:n,roughness:r,color:o,gamma:a,exposure:i}=this.params,c=u.b.create();u.b.translate(c,c,[0,-4,0]),u.b.scale(c,c,[.3,.03,.3]),this.terrainPrg.use(),this.terrainPrg.style({mMatrix:c,uMetallic:e,uRoughness:r,uSpecular:n,uNoiseMap:t,uBaseColor:o.map(t=>t/255),uRadianceMap:this.textureRad,uIrradianceMap:this.textureIrr,uAoMap:this.textureAo,uGamma:a,uExposure:i,uFogDensity:.04,uFogOffset:-.01,uFogColor:params.fogColor}),s.a.draw(this.terrain)}render(){s.a.clear(0,0,0);const t=this._fboNoise.getTexture();this._renderTerrain(t),this.sky.draw({texture0:this.pingpongFbo.read.textures[0],uFogColor:this.params.fogColor.map(t=>t/255)})}}}}]);