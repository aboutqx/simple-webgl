(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{49:function(o,i,e){"use strict";i.a="#version 300 es\n#define GLSLIFY 1\n// 漫射光diffuse不考虑视线\n// 通过取光和眼睛的半矢量和normal的内积来确定反射光的强度\nin vec3 position;\nin vec3 normal;\nin vec2 texCoord;\nuniform mat4 mMatrix;\nuniform mat4 uViewMatrix;\nuniform mat4 uProjectionMatrix;\nout   vec3 vNormal;\nout vec2 vTexCoord;\nout vec3 positionEye;\n\nvoid main(void){\n    vNormal     = normal;\n    vTexCoord = texCoord;\n    gl_Position = uProjectionMatrix* uViewMatrix * mMatrix * vec4(position, 1.0);\n    positionEye = (uViewMatrix * mMatrix * vec4(position, 1.0)).xyz;\n}\n"},50:function(o,i,e){"use strict";i.a="#version 300 es\n\nprecision highp float;\n#define GLSLIFY 1\n\nin vec3 vNormal;\nin vec2 vTexCoord;\nout vec4 FragColor;\nuniform vec3 diffuseColor;\nuniform mat4 invMatrix;\nuniform vec3 lightDirection;\nuniform vec3 uCameraPos;\nuniform sampler2D aoMap;\nuniform bool useAo;\nin vec3 positionEye;\n\nvoid main(void){\n    vec3  invLight  = normalize(invMatrix * vec4(lightDirection, 0.0)).xyz;\n    vec3  invEye    = normalize(invMatrix * vec4(uCameraPos, 0.0)).xyz;\n    vec3  halfLE    = normalize(invLight + invEye);\n    float diffuse   = clamp(dot(vNormal, invLight), 0.0, 1.0);\n    float specular  = pow(clamp(dot(vNormal, halfLE), 0.0, 1.0), 8.0);\n\n    float ao = texture(aoMap, vTexCoord).r;\n    vec3  destColor = diffuseColor * diffuse + .3 * vec3(specular);\n    if(useAo) destColor += ao * diffuseColor * .08 ;\n    FragColor    = vec4(destColor, 1.);\n    // FragColor    = vec4(uCameraPos, 1.);\n}\n"},74:function(o,i,e){"use strict";e.r(i),e.d(i,"default",(function(){return u}));var n=e(43),t=e(49),r=e(50),a=e(1),s=e(0);class u extends n.a{constructor(){super()}init(){this.prg=this.compile(t.a,r.a)}attrib(){this.statue=getAssets.statue}prepare(){this.orbital.radius=3.5,this.orbital.target=[0,0,0]}_setGUI(){this.addGUIParams({color:[110,122,110],useAo:!0}),this.gui.addColor(this.params,"color"),this.gui.add(this.params,"useAo")}uniform(){let o=a.b.create(),i=a.b.create();a.b.invert(i,o),this.prg.use(),this.prg.style({uModelMatrix:o,invMatrix:i,diffuseColor:[this.params.color[0]/255,this.params.color[1]/255,this.params.color[2]/255],lightDirection:[-.5,.5,.5],eyeDirection:this.camera.position,ambientColor:[.1,.1,.1],aoMap:getAssets.statueAo,useAo:this.params.useAo})}render(){s.a.clear(),this.prg.use(),s.a.draw(this.statue)}}}}]);