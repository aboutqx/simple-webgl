(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{104:function(n,e){n.exports="#version 300 es\nprecision mediump float;\n#define GLSLIFY 1\n\nlayout (location = 0) in vec3 position;\nlayout (location = 1) in vec3 normal;\nlayout (location = 2) in vec2 texCoord;\nlayout (location = 3) in vec3 tangent;\nlayout (location = 4) in vec3 bitangent;\n\n\nout vec3 FragPos;\nout vec2 TexCoords;\nout vec3 TangentLightPos;\nout vec3 TangentViewPos;\nout vec3 TangentFragPos;\n\n\nuniform mat4 pMatrix;\nuniform mat4 vMatrix;\nuniform mat4 mMatrix;\n\nuniform vec3 lightPos;\nuniform vec3 viewPos;\n\nvoid main() {\n  FragPos = vec3(mMatrix * vec4(position, 1.));\n  TexCoords = texCoord;\n\n  mat3 normalMatrix = transpose(inverse(mat3(mMatrix)));\n  vec3 T = normalize(normalMatrix * tangent);\n  vec3 N = normalize(normalMatrix * normal);\n  T = normalize(T - dot(T, N) * N);\n  vec3 B = cross(N, T);\n\n   mat3 TBN = transpose(mat3(T, B, N));\n  TangentLightPos = TBN * lightPos;\n  TangentViewPos  = TBN * viewPos;\n  TangentFragPos  = TBN * FragPos;\n\n  gl_Position = pMatrix * vMatrix * mMatrix * vec4(position, 1.0);\n}\n"},105:function(n,e){n.exports="#version 300 es\nprecision mediump float;\n#define GLSLIFY 1\nout vec4 FragColor;\n\nin vec3 FragPos;\nin vec2 TexCoords;\nin vec3 TangentLightPos;\nin vec3 TangentViewPos;\nin vec3 TangentFragPos;\n\n\nuniform sampler2D diffuseMap;\nuniform sampler2D normalMap;\n\nuniform vec3 lightPos;\nuniform vec3 viewPos;\n\nvoid main()\n{\n     // obtain normal from normal map in range [0,1]\n    vec3 normal = texture(normalMap, TexCoords).rgb;\n    // transform normal vector to range [-1,1]\n    normal = normalize(normal * 2.0 - 1.0);  // this normal is in tangent space\n\n    // get diffuse color\n    vec3 color = texture(diffuseMap, TexCoords).rgb;\n    // ambient\n    vec3 ambient = 0.1 * color;\n    // diffuse\n    vec3 lightDir = normalize(TangentLightPos - TangentFragPos);\n    float diff = max(dot(lightDir, normal), 0.0);\n    vec3 diffuse = diff * color;\n    // specular\n    vec3 viewDir = normalize(TangentViewPos - TangentFragPos);\n    vec3 reflectDir = reflect(-lightDir, normal);\n    vec3 halfwayDir = normalize(lightDir + viewDir);\n    float spec = pow(max(dot(normal, halfwayDir), 0.0), 32.0);\n\n    vec3 specular = vec3(0.2) * spec;\n    FragColor = vec4(ambient + diffuse + specular, 1.0);\n}\n"},54:function(n,e,a){"use strict";a.r(e),a.d(e,"default",function(){return h});var t=a(2),o=a(5),r=a(4),i=a(3),s=a.n(i),c=a(104),l=a.n(c),m=a(105),d=a.n(m),u=a(1),f=a(0);let g=u.a.identity(u.a.create()),v=u.a.identity(u.a.create());const p=n=>{const e=u.d.fromValues(-1,0,-1),a=u.d.fromValues(-1,0,1),t=u.d.fromValues(1,0,1),o=u.d.fromValues(1,0,-1),r=u.c.fromValues(0,1),i=u.c.fromValues(0,0),s=u.c.fromValues(1,0),c=u.c.fromValues(1,1),l=u.d.fromValues(0,1,0),m=u.d.create(),d=u.d.create(),f=u.c.create(),g=u.c.create();u.d.subtract(m,a,e),u.d.subtract(d,t,e),u.c.subtract(f,i,r),u.c.subtract(g,s,r);let v=1/(f[0]*g[1]-g[0]*f[1]);const p=u.d.create(),T=u.d.create(),h=u.d.create(),x=u.d.create();return p[0]=v*(g[1]*m[0]-f[1]*d[0]),p[1]=v*(g[1]*m[1]-f[1]*d[1]),p[2]=v*(g[1]*m[2]-f[1]*d[2]),u.d.normalize(p,p),T[0]=v*(-g[0]*m[0]+f[0]*d[0]),T[1]=v*(-g[0]*m[1]+f[0]*d[1]),T[2]=v*(-g[0]*m[2]+f[0]*d[2]),u.d.normalize(T,T),u.d.subtract(m,t,e),u.d.subtract(d,o,e),u.c.subtract(f,s,r),u.c.subtract(g,c,r),v=1/(f[0]*g[1]-g[0]*f[1]),h[0]=v*(g[1]*m[0]-f[1]*d[0]),h[1]=v*(g[1]*m[1]-f[1]*d[1]),h[2]=v*(g[1]*m[2]-f[1]*d[2]),u.d.normalize(h,h),x[0]=v*(-g[0]*m[0]+f[0]*d[0]),x[1]=v*(-g[0]*m[1]+f[0]*d[1]),x[2]=v*(-g[0]*m[2]+f[0]*d[2]),u.d.normalize(x,x),[e[0],e[1],e[2],l[0],l[1],l[2],r[0],r[1],p[0],p[1],p[2],T[0],T[1],T[2],a[0],a[1],a[2],l[0],l[1],l[2],i[0],i[1],p[0],p[1],p[2],T[0],T[1],T[2],t[0],t[1],t[2],l[0],l[1],l[2],s[0],s[1],p[0],p[1],p[2],T[0],T[1],T[2],e[0],e[1],e[2],l[0],l[1],l[2],r[0],r[1],h[0],h[1],h[2],x[0],x[1],x[2],t[0],t[1],t[2],l[0],l[1],l[2],s[0],s[1],h[0],h[1],h[2],x[0],x[1],x[2],o[0],o[1],o[2],l[0],l[1],l[2],c[0],c[1],h[0],h[1],h[2],x[0],x[1],x[2]]},T=[0,3,0];class h extends o.default{constructor(){super(),Object(t.a)(this,"count",0)}init(){this.prg=this.compile(l.a,d.a)}attrib(){const n=p();this.quad=new r.a,this.quad.bufferData(n,["position","normal","texCoord","tangent","bitangent"],[3,3,2,3,3])}prepare(){this.camera.offset=[0,2,0],f.d.enable(f.d.DEPTH_TEST),f.d.depthFunc(f.d.LEQUAL),f.d.clearColor(.3,.3,.3,1),f.d.clearDepth(1);const n=new s.a(f.d).fromImage(getAssets.brickwall),e=new s.a(f.d).fromImage(getAssets.brickwallNormal);n.bind(0),e.bind(1)}uniform(){g=this.camera.viewMatrix,u.a.perspective(v,Object(f.e)(60),f.a.clientWidth/f.a.clientHeight,.1,100);let n=u.a.identity(u.a.create());u.a.scale(n,n,[1.8,1.8,1.8]),this.prg.use(),this.prg.style({mMatrix:n,vMatrix:g,pMatrix:v,viewPos:this.camera.cameraPos,lightPos:T,diffuseMap:0,normalMap:1})}render(){f.d.clear(f.d.COLOR_BUFFER_BIT|f.d.DEPTH_BUFFER_BIT),this.quad.bind(this.prg,["position","normal","texCoord","tangent"]),this.quad.draw()}}}}]);