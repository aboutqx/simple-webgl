(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{116:function(e,t){e.exports="#define GLSLIFY 1\nattribute vec3  position;\nattribute vec3  normal;\nattribute vec4  color;\nuniform   mat4  mvpMatrix;\nuniform   mat4  invMatrix;\nuniform   vec3  lightDirection;\nuniform   vec4  ambient;\nvarying   vec4  vDest;\nvarying   vec4  vColor;\nvarying   vec3  vNormal;\nvarying   float vDepth;\n\nvoid main(){\n    gl_Position = mvpMatrix * vec4(position, 1.0);\n    vec3 invLight = normalize(invMatrix * vec4(lightDirection, 0.0)).xyz;\n    float diff = clamp(dot(normal, invLight), 0.1, 1.0);\n    vDest = vec4(color.rgb * ambient.rgb * diff, 1.0);\n    vColor = color * ambient;\n    vNormal = normal;\n    vDepth = gl_Position.z / gl_Position.w;\n}\n"},117:function(e,t){e.exports="#extension GL_EXT_draw_buffers: require\n\nprecision mediump float;\n#define GLSLIFY 1\n\nvarying vec4  vDest;\nvarying vec4  vColor;\nvarying vec3  vNormal;\nvarying float vDepth;\n\nfloat near = 0.1;\nfloat far  = 100.0;\n\n// https://learnopengl-cn.github.io/04%20Advanced%20OpenGL/01%20Depth%20testing/\n// http://www.songho.ca/opengl/gl_projectionmatrix.html\nfloat LinearizeDepth(float depth)\n{\n    float z = depth * 2.0 - 1.0; // back to NDC\n    return (2.0 * near * far) / (far + near - z * (far - near));\n}\n\nvoid main(){\n    gl_FragData[0] = vDest;\n    gl_FragData[1] = vColor;\n    gl_FragData[2] = vec4((vNormal + 1.0) / 2.0, 1.0);\n    float depth = (LinearizeDepth(gl_FragCoord.z) -near) /(far-near);\n    gl_FragData[3] = vec4(vec3(depth), 1.);\n\n    // gl_FragColor = vec4(.3,.3,.3,1.);\n}\n"},118:function(e,t){e.exports="#define GLSLIFY 1\nattribute vec3 position;\nattribute vec2 texCoord;\nuniform vec3 offset;\nvarying vec2 vTexCoord;\n\nvoid main(){\n\tvTexCoord = texCoord;\n\tgl_Position = vec4(position + offset, 1.0);\n}\n"},119:function(e,t){e.exports="precision mediump float;\n#define GLSLIFY 1\n\nuniform sampler2D texture;\nvarying vec2 vTexCoord;\n\nvoid main(){\n\tgl_FragColor = texture2D(texture, vTexCoord);\n  // gl_FragColor = vec4(.3, .0, .3, 1.);\n}\n"},56:function(e,t,r){"use strict";r.r(t),r.d(t,"default",function(){return p});var n=r(2),i=r(5),a=r(11),c=r(0),o=r(116),E=r.n(o),l=r(117),s=r.n(l),T=r(118),f=r.n(T),u=r(119),_=r.n(u),b=r(1),v=r(15),d=r.n(v),R=r(6);let m,F,h={color_attachments:0,draw_buffers:0};class p extends i.default{constructor(){super(),Object(n.a)(this,"count",0),Object(n.a)(this,"offset",[[-.5,-.5,0],[-.5,.5,0],[.5,-.5,0],[.5,.5,0]])}init(){(m=c.c.getExtension("WEBGL_draw_buffers"))?(h.color_attachments=c.c.getParameter(m.MAX_COLOR_ATTACHMENTS_WEBGL),h.draw_buffers=c.c.getParameter(m.MAX_DRAW_BUFFERS_WEBGL),console.log("MAX_COLOR_ATTACHMENTS_WEBGL: "+h.color_attachments),console.log("MAX_DRAW_BUFFERS_WEBGL: "+h.draw_buffers),this.mrtPrg=this.compile(E.a,s.a),this.prg=this.compile(f.a,_.a)):alert("WEBGL_draw_buffers not supported")}attrib(){let{pos:e,index:t,normal:r,color:n}=Object(R.Torus)(64,64,1,3,[1,1,1,1]);const i=new a.a(c.c,new Float32Array(e)),o=new a.a(c.c,new Float32Array(r)),E=new a.a(c.c,new Float32Array(n));this.indexBuffer=new a.b(c.c,c.c.UNSIGNED_SHORT,new Uint16Array(t),c.c.STATIC_DRAW),i.attrib("position",3,c.c.FLOAT),o.attrib("normal",3,c.c.FLOAT),E.attrib("color",4,c.c.FLOAT),this.torusVao=new d.a(c.c),this.torusVao.setup(this.mrtPrg,[i,o,E]);const l=new a.a(c.c,new Float32Array([-.5,.5,0,.5,.5,0,-.5,-.5,0,.5,-.5,0])),s=new a.a(c.c,new Float32Array([0,1,1,1,0,0,1,0]));this.vIndexBuffer=new a.b(c.c,c.c.UNSIGNED_SHORT,new Uint16Array([0,2,1,2,3,1]),c.c.STATIC_DRAW),l.attrib("position",3,c.c.FLOAT),s.attrib("texCoord",2,c.c.FLOAT),this.mainVao=new d.a(c.c),this.mainVao.setup(this.prg,[l,s])}prepare(){c.c.enable(c.c.DEPTH_TEST),c.c.depthFunc(c.c.LEQUAL),c.c.enable(c.c.CULL_FACE),c.c.clearColor(.3,.3,.3,1),c.c.clearDepth(1),F=function(e,t){let r=c.c.createFramebuffer();c.c.bindFramebuffer(c.c.FRAMEBUFFER,r);let n=[];for(let r=0;r<4;++r)n[r]=c.c.createTexture(),c.c.bindTexture(c.c.TEXTURE_2D,n[r]),c.c.texImage2D(c.c.TEXTURE_2D,0,c.c.RGBA,e,t,0,c.c.RGBA,c.c.UNSIGNED_BYTE,null),c.c.texParameteri(c.c.TEXTURE_2D,c.c.TEXTURE_MAG_FILTER,c.c.LINEAR),c.c.texParameteri(c.c.TEXTURE_2D,c.c.TEXTURE_MIN_FILTER,c.c.LINEAR),c.c.texParameteri(c.c.TEXTURE_2D,c.c.TEXTURE_WRAP_S,c.c.CLAMP_TO_EDGE),c.c.texParameteri(c.c.TEXTURE_2D,c.c.TEXTURE_WRAP_T,c.c.CLAMP_TO_EDGE),c.c.framebufferTexture2D(c.c.FRAMEBUFFER,m.COLOR_ATTACHMENT0_WEBGL+r,c.c.TEXTURE_2D,n[r],0);let i=c.c.createRenderbuffer();return c.c.bindRenderbuffer(c.c.RENDERBUFFER,i),c.c.renderbufferStorage(c.c.RENDERBUFFER,c.c.DEPTH_COMPONENT16,e,t),c.c.framebufferRenderbuffer(c.c.FRAMEBUFFER,c.c.DEPTH_ATTACHMENT,c.c.RENDERBUFFER,i),c.c.bindTexture(c.c.TEXTURE_2D,null),c.c.bindRenderbuffer(c.c.RENDERBUFFER,null),c.c.bindFramebuffer(c.c.FRAMEBUFFER,null),{f:r,d:i,t:n}}(c.b.width,c.b.height),c.c.activeTexture(c.c.TEXTURE0),c.c.bindTexture(c.c.TEXTURE_2D,F.t[0]),c.c.activeTexture(c.c.TEXTURE1),c.c.bindTexture(c.c.TEXTURE_2D,F.t[1]),c.c.activeTexture(c.c.TEXTURE2),c.c.bindTexture(c.c.TEXTURE_2D,F.t[2]),c.c.activeTexture(c.c.TEXTURE3),c.c.bindTexture(c.c.TEXTURE_2D,F.t[3]),c.c.bindFramebuffer(c.c.FRAMEBUFFER,F.f);const e=[m.COLOR_ATTACHMENT0_WEBGL,m.COLOR_ATTACHMENT1_WEBGL,m.COLOR_ATTACHMENT2_WEBGL,m.COLOR_ATTACHMENT3_WEBGL];m.drawBuffersWEBGL(e),this.camera.radius=28}uniform(){let e=this.camera.viewMatrix,t=b.b.create();this.mvpMatrix=b.b.create(),this.tmpMatrix=b.b.create(),b.b.perspective(t,Object(c.d)(45),c.b.clientWidth/c.b.clientHeight,.1,100),b.b.multiply(this.tmpMatrix,t,e)}render(){c.c.bindFramebuffer(c.c.FRAMEBUFFER,F.f),c.c.clear(c.c.COLOR_BUFFER_BIT|c.c.DEPTH_BUFFER_BIT);const e=[-.577,.577,.577];let t=b.b.create(),r=b.b.create();this.count++;let n=this.count%360*Math.PI/180;this.mrtPrg.use(),this.torusVao.bind(),this.indexBuffer.bind();for(let i=0;i<9;i++){b.b.identity(t),b.b.rotate(t,t,2*i*Math.PI/9,[0,1,0]),b.b.translate(t,t,[0,0,15]),b.b.rotate(t,t,n,[1,1,0]),b.b.multiply(this.mvpMatrix,this.tmpMatrix,t),b.b.invert(r,t);let a=Object(R.hsva)(40*i,1,1,1);this.mrtPrg.style({lightDirection:e,mvpMatrix:this.mvpMatrix,ambient:a,invMatrix:r}),this.indexBuffer.drawTriangles()}this.torusVao.unbind(),c.c.bindFramebuffer(c.c.FRAMEBUFFER,null),c.c.clear(c.c.COLOR_BUFFER_BIT|c.c.DEPTH_BUFFER_BIT),this.prg.use(),this.mainVao.bind(),this.vIndexBuffer.bind();for(let e=0;e<4;++e)this.prg.style({offset:this.offset[e],texture:e}),this.vIndexBuffer.drawTriangles();this.mainVao.unbind()}}}}]);