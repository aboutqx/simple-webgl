(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{30:function(e,t){e.exports="#version 300 es\n#define GLSLIFY 1\nlayout (location = 0) in vec3 position;\n\nuniform mat4 mMatrix;\nuniform mat4 vMatrix;\nuniform mat4 pMatrix;\n\nvoid main()\n{\n    gl_Position = pMatrix * vMatrix * mMatrix * vec4(position, 1.0);\n}\n"},31:function(e,t){e.exports="#version 300 es\nprecision mediump float;\n#define GLSLIFY 1\nout vec4 FragColor;\nuniform vec3 lightColor;\nvoid main()\n{\n    FragColor = vec4(lightColor, 1.0); \n}\n"},44:function(e,t,n){"use strict";n.r(t),n.d(t,"default",function(){return S});var r=n(10),i=n.n(r),o=n(2),a=n(5),c=n(0),s=n(17),l=n.n(s),u=n(76),f=n.n(u),m=n(77),d=n.n(m),g=n(78),h=n.n(g),p=n(79),E=n.n(p),T=n(80),x=n.n(T),b=n(30),F=n.n(b),R=n(31),v=n.n(R),M=n(8),_=n(6),P=n(1),D=n(3),A=n(18),C=n(35);const U=[[-10,-10,-10],[0,-10,-10],[10,-10,-10],[-10,-10,0],[0,-10,0],[10,-10,0],[-10,-10,10],[0,-10,10],[10,-10,10]],L=[],B=[];for(let e=0;e<32;e++){let e=33*Math.random()-16,t=10*Math.random()-2,n=20*Math.random()-4;L.push([e,t,n]);let r=Math.random()/2+.5,i=Math.random()/2+.5,o=Math.random()/2+.5;B.push([r,i,o])}class S extends a.default{constructor(){super(),Object(o.a)(this,"count",0)}init(){c.c.getExtension("EXT_color_buffer_float"),c.c.getExtension("OES_texture_half_float_linear"),this.prg=this.compile(l.a,f.a),this.gBufferPrg=this.compile(d.a,h.a),this.fboPrg=this.compile(E.a,x.a),this.lampPrg=this.compile(F.a,v.a)}attrib(){var e,t;return i.a.async(function(n){for(;;)switch(n.prev=n.next){case 0:return this.cube=M.a.cube(1),(e=new D.a).bufferData(_.QuadData,["position","texCoord"],[3,2]),this.quad=e,n.next=6,i.a.awrap(new C.a("nanosuit.mtl","./assets/models/nanosuit").parse(getAssets.nanosuitMTL));case 6:t=n.sent,this.nanosuit=(new A.a).parseObj(getAssets.nanosuit,t);case 8:case"end":return n.stop()}},null,this)}prepare(){c.c.clearColor(0,0,0,1),c.c.clearDepth(1),c.c.enable(c.c.DEPTH_TEST),c.c.depthFunc(c.c.LEQUAL),this.mrt=function(e,t,n){let r=c.c.createFramebuffer();c.c.bindFramebuffer(c.c.FRAMEBUFFER,r);let i=[];const o=[];for(let r=0;r<n.length;++r)i[r]=c.c.createTexture(),c.c.bindTexture(c.c.TEXTURE_2D,i[r]),"16f"===n[r]?c.c.texImage2D(c.c.TEXTURE_2D,0,c.c.RGBA16F,e,t,0,c.c.RGBA,c.c.HALF_FLOAT,null):c.c.texImage2D(c.c.TEXTURE_2D,0,c.c.RGBA,e,t,0,c.c.RGBA,c.c.UNSIGNED_BYTE,null),c.c.texParameteri(c.c.TEXTURE_2D,c.c.TEXTURE_MAG_FILTER,c.c.LINEAR),c.c.texParameteri(c.c.TEXTURE_2D,c.c.TEXTURE_MIN_FILTER,c.c.LINEAR),c.c.texParameteri(c.c.TEXTURE_2D,c.c.TEXTURE_WRAP_S,c.c.CLAMP_TO_EDGE),c.c.texParameteri(c.c.TEXTURE_2D,c.c.TEXTURE_WRAP_T,c.c.CLAMP_TO_EDGE),c.c.framebufferTexture2D(c.c.FRAMEBUFFER,c.c.COLOR_ATTACHMENT0+r,c.c.TEXTURE_2D,i[r],0),o.push(c.c.COLOR_ATTACHMENT0+r);c.c.drawBuffers(o);const a=c.c.createRenderbuffer();c.c.bindRenderbuffer(c.c.RENDERBUFFER,a),c.c.renderbufferStorage(c.c.RENDERBUFFER,c.c.DEPTH24_STENCIL8,e,t),c.c.framebufferRenderbuffer(c.c.FRAMEBUFFER,c.c.DEPTH_ATTACHMENT,c.c.RENDERBUFFER,a);const s=c.c.checkFramebufferStatus(c.c.FRAMEBUFFER);s!=c.c.FRAMEBUFFER_COMPLETE&&console.log(`gl.checkFramebufferStatus() returned ${s.toString(16)}`);return c.c.bindTexture(c.c.TEXTURE_2D,null),c.c.bindRenderbuffer(c.c.RENDERBUFFER,null),c.c.bindFramebuffer(c.c.FRAMEBUFFER,null),{frameBuffer:r,depthBuffer:a,texture:i}}(c.b.width,c.b.height,["16f","16f","rgba"]),this.camera.target=[0,-1,0],this.camera.offset=[1,3,0],this.camera.radius=18}uniform(){this.vMatrix=this.camera.viewMatrix,this.pMatrix=P.b.identity(P.b.create()),P.b.perspective(this.pMatrix,Object(c.d)(60),c.b.clientWidth/c.b.clientHeight,.1,100)}render(){if(c.c.bindFramebuffer(c.c.FRAMEBUFFER,this.mrt.frameBuffer),c.c.clear(c.c.COLOR_BUFFER_BIT|c.c.DEPTH_BUFFER_BIT),this.gBufferPrg.use(),this.nanosuit){this.gBufferPrg.style({vMatrix:this.vMatrix,pMatrix:this.pMatrix});for(let e=0;e<U.length;e++){let t=P.b.identity(P.b.create());P.b.translate(t,t,U[e]),this.gBufferPrg.style({mMatrix:t});for(let e=0;e<this.nanosuit.length;e++)this.nanosuit[e].bind(this.gBufferPrg,["position","normal","texCoord"]),this.nanosuit[e].draw()}}c.c.bindFramebuffer(c.c.FRAMEBUFFER,null),c.c.clear(c.c.COLOR_BUFFER_BIT|c.c.DEPTH_BUFFER_BIT),c.c.activeTexture(c.c.TEXTURE0),c.c.bindTexture(c.c.TEXTURE_2D,this.mrt.texture[0]),c.c.activeTexture(c.c.TEXTURE1),c.c.bindTexture(c.c.TEXTURE_2D,this.mrt.texture[1]),c.c.activeTexture(c.c.TEXTURE2),c.c.bindTexture(c.c.TEXTURE_2D,this.mrt.texture[2]),this.prg.use(),this.prg.style({gPosition:0,gNormal:1,gAlbedoSpec:2,viewPos:this.camera.cameraPos},!0);for(let e=0;e<L.length;e++)c.c.uniform3fv(c.c.getUniformLocation(this.prg.program,[`lights[${e}].Position`]),L[e]),c.c.uniform3fv(c.c.getUniformLocation(this.prg.program,[`lights[${e}].Color`]),B[e]),c.c.uniform1f(c.c.getUniformLocation(this.prg.program,[`lights[${e}].Linear`]),.1),c.c.uniform1f(c.c.getUniformLocation(this.prg.program,[`lights[${e}].Quadratic`]),.12);this.quad.bind(this.prg,["position","texCoord"]),this.quad.draw(c.c.TRIANGLE_STRIP),c.c.bindFramebuffer(c.c.READ_FRAMEBUFFER,this.mrt.frameBuffer),c.c.bindFramebuffer(c.c.DRAW_FRAMEBUFFER,null),c.c.blitFramebuffer(0,0,c.b.width,c.b.height,0,0,c.b.width,c.b.height,c.c.DEPTH_BUFFER_BIT,c.c.NEAREST),c.c.bindFramebuffer(c.c.FRAMEBUFFER,null),this.lampPrg.use(),this.lampPrg.style({vMatrix:this.vMatrix,pMatrix:this.pMatrix});for(let e=0;e<L.length;e++){let t=P.b.identity(P.b.create());P.b.translate(t,t,L[e]),P.b.scale(t,t,[.3,.3,.3]),this.lampPrg.style({mMatrix:t,lightColor:B[e]}),this.cube.bind(["position"]),this.cube.draw()}}}},76:function(e,t){e.exports="#version 300 es\nprecision mediump float;\n#define GLSLIFY 1\n\nout vec4 outColor;\n\nin vec2 TexCoords;\n\nuniform sampler2D gPosition;\nuniform sampler2D gNormal;\nuniform sampler2D gAlbedoSpec;\n\nstruct Light {\n    vec3 Position;\n    vec3 Color;\n\n    float Linear;\n    float Quadratic;\n};\nconst int NR_LIGHTS = 32;\nuniform Light lights[NR_LIGHTS];\nuniform vec3 viewPos;\n\nvoid main() {\n    vec3 FragPos = texture(gPosition, TexCoords).rgb;\n    vec3 Normal = texture(gNormal, TexCoords).rgb;\n    vec3 Diffuse = texture(gAlbedoSpec, TexCoords).rgb;\n    float Specular = texture(gAlbedoSpec, TexCoords).a;\n\n    // then calculate lighting as usual\n    vec3 lighting  = Diffuse * .1; // hard-coded ambient component\n    vec3 viewDir  = normalize(viewPos - FragPos);\n    for(int i = 0; i < NR_LIGHTS; ++i)\n    {\n        // diffuse\n        vec3 lightDir = normalize(lights[i].Position - FragPos);\n        vec3 diffuse = max(dot(Normal, lightDir), 0.0) * Diffuse * lights[i].Color;\n        // specular\n        vec3 halfwayDir = normalize(lightDir + viewDir);\n        float spec = pow(max(dot(Normal, halfwayDir), 0.0), 16.0);\n        vec3 specular = lights[i].Color * spec * Specular;\n        // attenuation\n        float distance = length(lights[i].Position - FragPos);\n        float attenuation = 1.0 / (1.0 + lights[i].Linear * distance + lights[i].Quadratic * distance * distance);\n        diffuse *= attenuation;\n        specular *= attenuation;\n        lighting += diffuse + specular;\n    }\n    outColor = vec4(lighting, 1.0);\n}\n"},77:function(e,t){e.exports="#version 300 es\n#define GLSLIFY 1\n\nlayout (location = 0) in vec3 position;\nlayout (location = 1) in vec3 normal;\nlayout (location = 2) in vec2 texCoord;\n\nout vec3 FragPos;\nout vec2 TexCoords;\nout vec3 Normal;\n\nuniform mat4 mMatrix;\nuniform mat4 vMatrix;\nuniform mat4 pMatrix;\n\nvoid main()\n{\n    vec4 worldPos = mMatrix * vec4(position, 1.0);\n    FragPos = vec3(worldPos);\n\n    TexCoords = texCoord;\n\n    mat3 normalMatrix = transpose(inverse(mat3(mMatrix)));\n    Normal = normalMatrix * normal;\n\n    gl_Position = pMatrix * vMatrix * worldPos;\n}\n"},78:function(e,t){e.exports="#version 300 es\nprecision mediump float;\n#define GLSLIFY 1\nlayout (location = 0) out vec3 gPosition;\nlayout (location = 1) out vec3 gNormal;\nlayout (location = 2) out vec4 gAlbedoSpec;\n\nin vec2 TexCoords;\nin vec3 FragPos;\nin vec3 Normal;\n\nuniform sampler2D diffuseMap1;\nuniform sampler2D specularMap1;\n\nvoid main()\n{\n    // store the fragment position vector in the first gbuffer texture\n    gPosition = FragPos;\n    // also store the per-fragment normals into the gbuffer\n    gNormal = normalize(Normal);\n    // and the diffuse per-fragment color\n    gAlbedoSpec.rgb = texture(diffuseMap1, TexCoords).rgb;\n    // store specular intensity in gAlbedoSpec's alpha component\n    gAlbedoSpec.a = texture(specularMap1, TexCoords).r;\n}\n"},79:function(e,t){e.exports="#version 300 es\n#define GLSLIFY 1\nin vec3 position;\nin vec2 texCoord;\n\nout vec2 TexCoords;\nvoid main(){\n  TexCoords = texCoord;\n  gl_Position = vec4(position, 1.);\n}\n"},80:function(e,t){e.exports="#version 300 es\nprecision mediump float;\n#define GLSLIFY 1\n\nout vec4 FragColor;\nin  vec2 TexCoords;\n\nuniform sampler2D fboAttachment;\n\nvoid main()\n{\n    FragColor = vec4(texture(fboAttachment, TexCoords).rgb, 1.);\n}\n"}}]);