(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{45:function(e,t,r){"use strict";var i=r(0),n=r(3);let a,o;t.a=class{constructor(e,t,r={},n=1){a=!window.useWebgl2&&i.c.getExtension("WEBGL_depth_texture"),this.width=e||i.b.width,this.height=t||i.b.height,this._numTargets=n,this._multipleTargets=n>1,1==r.hdr?this._parameters={internalFormat:i.c.RGBA16F,type:i.c.HALF_FLOAT,minFilter:r.minFilter,maxFilter:r.magFilter}:this._parameters=r,window.useWebgl2||(o=i.c.getExtension("WEBGL_draw_buffers")),this._multipleTargets&&this._checkMaxNumRenderTarget(),this._init()}_init(){if(this._initTextures(),this.frameBuffer=i.c.createFramebuffer(),i.c.bindFramebuffer(i.c.FRAMEBUFFER,this.frameBuffer),window.useWebgl2){if(0===this._numTargets)i.c.readBuffer(i.c.NONE),i.c.drawBuffers([i.c.NONE]);else{const e=[];for(let t=0;t<this._numTargets;t++)i.c.framebufferTexture2D(i.c.DRAW_FRAMEBUFFER,i.c.COLOR_ATTACHMENT0+t,i.c.TEXTURE_2D,this._textures[t].texture,0),e.push(i.c["COLOR_ATTACHMENT"+t]);i.c.drawBuffers(e)}i.c.framebufferTexture2D(i.c.DRAW_FRAMEBUFFER,i.c.DEPTH_ATTACHMENT,i.c.TEXTURE_2D,this.glDepthTexture.texture,0)}else{for(let e=0;e<this._numTargets;e++)i.c.framebufferTexture2D(i.c.FRAMEBUFFER,i.c.COLOR_ATTACHMENT0+e,i.c.TEXTURE_2D,this._textures[e].texture,0);if(this._multipleTargets){const e=[];for(let t=0;t<this._numTargets;t++)e.push(o[`COLOR_ATTACHMENT${t}_WEBGL`]);o.drawBuffersWEBGL(e)}a&&i.c.framebufferTexture2D(i.c.FRAMEBUFFER,i.c.DEPTH_ATTACHMENT,i.c.TEXTURE_2D,this.glDepthTexture.texture,0)}i.c.checkFramebufferStatus(i.c.FRAMEBUFFER)!=i.c.FRAMEBUFFER_COMPLETE&&console.log("gl.checkFramebufferStatus() returned "+status.toString(16)),i.c.bindTexture(i.c.TEXTURE_2D,null),i.c.bindRenderbuffer(i.c.RENDERBUFFER,null),i.c.bindFramebuffer(i.c.FRAMEBUFFER,null),this.clear()}_checkMaxNumRenderTarget(){const e=window.useWebgl2?i.c.getParameter(i.c.MAX_DRAW_BUFFERS):i.c.getParameter(o.MAX_DRAW_BUFFERS_WEBGL);this._numTargets>e&&(console.error("Over max number of draw buffers supported : ",e),this._numTargets=e)}_initTextures(){this._textures=[];for(let e=0;e<this._numTargets;e++){const e=this._createTexture();this._textures.push(e)}window.useWebgl2?this.glDepthTexture=this._createTexture(i.c.DEPTH_COMPONENT16,i.c.UNSIGNED_SHORT,i.c.DEPTH_COMPONENT,{minFilter:i.c.NEAREST,magFilter:i.c.NEAREST}):this.glDepthTexture=this._createTexture(i.c.DEPTH_COMPONENT,i.c.UNSIGNED_SHORT,i.c.DEPTH_COMPONENT,{minFilter:i.c.LINEAR})}_createTexture(e,t,r,a={}){const o=Object.assign({},this._parameters);o.internalFormat=e||o.internalFormat,o.format=r||o.format||i.c.RGBA,o.type=t||o.type||i.c.UNSIGNED_BYTE;for(const e in a)o[e]=a[e];return new n.a(null,o,this.width,this.height)}bind(e=!0){e&&i.c.viewport(0,0,this.width,this.height),i.c.bindFramebuffer(i.c.FRAMEBUFFER,this.frameBuffer),i.a.clear(0,0,0,1)}unbind(e=!0){e&&i.c.viewport(0,0,i.b.width,i.b.height),i.c.bindFramebuffer(i.c.FRAMEBUFFER,null),this._textures.forEach(e=>{e.generateMipmap()})}clear(e=0,t=0,r=0,n=0){this.bind(),i.a.clear(e,t,r,n),this.unbind()}get textures(){return this._textures}getTexture(e=0){return this._textures[e]}get depthTexture(){return this.glDepthTexture}get minFilter(){return this._textures[0].minFilter}set minFilter(e){this._textures.forEach(t=>{t.minFilter=e})}get magFilter(){return this._textures[0].magFilter}set magFilter(e){this._textures.forEach(t=>{t.magFilter=e})}get wrapS(){return this._textures[0].wrapS}set wrapS(e){this._textures.forEach(t=>{t.wrapS=e})}get wrapT(){return this._textures[0].wrapT}set wrapT(e){this._textures.forEach(t=>{t.wrapT=e})}showParameters(){this._textures[0].showParameters()}get numTargets(){return this._numTargets}}},89:function(e,t,r){"use strict";r.r(t),r.d(t,"default",(function(){return l}));var i=r(43),n=r(0),a=r(1),o=r(42),s=r(13),h=r(45);const c=[0,4,-1];class l extends i.a{constructor(){super()}init(){this.prg=this.compile("#version 300 es\n#define GLSLIFY 1\n//depth\nlayout (location = 0) in vec3 position;\nlayout (location = 1) in vec3 normal;\nlayout (location = 2) in vec2 texCoord;\n\nuniform mat4 lightSpaceMatrix;\nuniform mat4 mMatrix;\nout vec2 vTexCoord;\nout vec3 Normal;\nvoid main(void){\n    vTexCoord = texCoord;\n    Normal = normal;\n    gl_Position = lightSpaceMatrix * mMatrix * vec4(position, 1.0);\n}\n","#version 300 es\nprecision highp float;\n#define GLSLIFY 1\n\nvoid main()\n{   \n\n}\n"),this.depthQuadPrg=this.compile(s.c,"#version 300 es\nprecision highp float;\n#define GLSLIFY 1\nout vec4 FragColor;\n\nin vec2 vTexCoord;\n\nuniform sampler2D depthMap;\nuniform float near_plane;\nuniform float far_plane;\n\n// required when using a perspective projection matrix\nfloat LinearizeDepth(float depth)\n{\n    float z = depth * 2.0 - 1.0; // Back to NDC\n    return (2.0 * near_plane * far_plane) / (far_plane + near_plane - z * (far_plane - near_plane));\n}\n\nvoid main()\n{\n    float depthValue = texture(depthMap, vTexCoord).r;\n    // FragColor = vec4(vec3(LinearizeDepth(depthValue) / far_plane), 1.0); // perspective\n    FragColor = vec4(vec3(depthValue), 1.0); // orthographic\n}\n"),this.shadowPrg=this.compile("#version 300 es\n#define GLSLIFY 1\n//shadow\nlayout (location = 0) in vec3 position;\nlayout (location = 1) in vec3 normal;\nlayout (location = 2) in vec2 texCoord;\n\nout vec3 vPosition;\nout  vec3 Normal;\nout  vec2 vTexCoord;\nout vec4 FragPosLightSpace;\n\nuniform mat4 uProjectionMatrix;\nuniform mat4 uViewMatrix;\nuniform mat4 mMatrix;\nuniform mat4 lightSpaceMatrix;\n\nvoid main(){\n  gl_Position = uProjectionMatrix * uViewMatrix * mMatrix * vec4(position, 1.);\n  vPosition = vec3(mMatrix * vec4(position, 1.));\n  Normal = transpose(inverse(mat3(mMatrix))) * normal;\n  vTexCoord = texCoord;\n  FragPosLightSpace = lightSpaceMatrix * vec4(vPosition, 1.); // 从lightPos视角看的坐标\n}\n","#version 300 es\nprecision highp float;\n#define GLSLIFY 1\nout vec4 FragColor;\n\nin vec3 vPosition;\nin vec3 Normal;\nin vec2 vTexCoord;\nin vec4 FragPosLightSpace;\n\nuniform sampler2D diffuseTexture;\nuniform sampler2D shadowMap;\nuniform vec3 lightPos;\nuniform vec3 uCameraPos;\n\nfloat ShadowCalculation(vec4 fragPosLightSpace, float bias){\n      // 执行透视除法\n    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;\n    // 变换到[0,1]的范围\n    projCoords = projCoords * 0.5 + 0.5;\n    // 取得最近点的深度(使用[0,1]范围下的fragPosLight当坐标)\n    float closestDepth = texture(shadowMap, projCoords.xy).r;\n    // 取得当前片元在光源视角下的深度\n    float currentDepth = projCoords.z;\n    // 检查当前片元是否在阴影中\n\n    float shadow = 0.0;\n    vec2 texelSize = vec2(1. / float(textureSize(shadowMap, 0).x));\n    for(int x = -1; x <= 1; ++x)\n    {\n        for(int y = -1; y <= 1; ++y)\n        {\n            float pcfDepth = texture(shadowMap, projCoords.xy + vec2(x, y) * texelSize).r;\n            shadow += currentDepth - bias > pcfDepth ? .7 : 0.0;\n        }\n    }\n    shadow /= 9.0;\n\n    if(projCoords.z > 1.0) shadow = 0.0;\n\n    return shadow;\n}\n\nvoid main(){\n    vec3 color = texture(diffuseTexture, vTexCoord).rgb;\n    vec3 normal = normalize(Normal);\n    vec3 lightColor = vec3(1.);\n    // Ambient\n    vec3 ambient = 0.15 * color;\n    // Diffuse\n    vec3 lightDir = normalize(lightPos - vPosition);\n    float diff = max(dot(lightDir, normal), 0.0);\n    vec3 diffuse = diff * lightColor;\n    // Specular\n    vec3 viewDir = normalize(uCameraPos - vPosition);\n    vec3 reflectDir = reflect(-lightDir, normal);\n    float spec = 0.0;\n    vec3 halfwayDir = normalize(lightDir + viewDir);\n    spec = pow(max(dot(normal, halfwayDir), 0.0), 64.0);\n    vec3 specular = spec * lightColor;\n    // 计算阴影\n    float bias = max(0.05 * (1.0 - dot(normal, lightDir)), 0.005);\n    float shadow = ShadowCalculation(FragPosLightSpace, bias);\n    vec3 lighting = (ambient + (1.0 - shadow) * (diffuse + specular)) * color;\n\n    FragColor = vec4(vec3(lighting), 1.0);\n}\n")}attrib(){this.plane=o.a.plane(30,30,1,"xz"),this.cube=o.a.cube(1),this.quad=o.a.bigTriangle()}prepare(){let e=a.b.create(),t=a.b.create();this.tmpMatrix=a.b.create();a.b.ortho(t,-25,25,-25,25,.1,18.5),a.b.lookAt(e,c,[0,0,0],[0,1,0]),a.b.multiply(this.tmpMatrix,t,e),this._fboDepth=new h.a(1024,1024,{},0),this.orbital.radius=11,this.wood=getAssets.wood,this.wood.bind(),this.wood.repeat()}uniform(){}render(){this._fboDepth.bind(),n.a.clear(),this.prg.use(),this.prg.style({lightSpaceMatrix:this.tmpMatrix}),this._renderScene(this.prg),this._fboDepth.unbind(),n.c.viewport(0,0,n.b.width,n.b.height),this.frameBufferGUI.textureList=[{texture:this._fboDepth.depthTexture}],this.shadowPrg.use(),this.shadowPrg.style({diffuseTexture:this.wood,shadowMap:this._fboDepth.depthTexture,lightPos:c,lightSpaceMatrix:this.tmpMatrix}),this._renderScene(this.shadowPrg)}_renderScene(e){this.mMatrix=a.b.create(),a.b.translate(this.mMatrix,this.mMatrix,[0,-2,0]),e.style({mMatrix:this.mMatrix}),n.a.draw(this.plane),this.mMatrix=a.b.create(),a.b.translate(this.mMatrix,this.mMatrix,[-1.2,0,5]),e.style({mMatrix:this.mMatrix}),n.a.draw(this.cube),this.mMatrix=a.b.create(),a.b.translate(this.mMatrix,this.mMatrix,[2,2,4]),e.style({mMatrix:this.mMatrix}),n.a.draw(this.cube),this.mMatrix=a.b.create(),a.b.translate(this.mMatrix,this.mMatrix,[-2.2,.4,1]),a.b.rotate(this.mMatrix,this.mMatrix,Object(n.d)(30),[2,2,4]),e.style({mMatrix:this.mMatrix}),n.a.draw(this.cube)}}}}]);