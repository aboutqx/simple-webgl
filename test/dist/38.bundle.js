(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{102:function(n,e,o){"use strict";o.r(e),o.d(e,"default",(function(){return a}));var i=o(43),r=o(42),t=o(1),s=o(0);class a extends i.a{constructor(){super()}init(){this.prg=this.basicVert("#version 300 es\nprecision highp float;\n#define GLSLIFY 1\nin vec3 vPosition;\nuniform float flowIndex[8];\n\nout vec4 FragColor;\nuniform vec3 color;\nuniform vec3 flowColor;\nin float vIndex;\nbool almostEqual(vec3 a , vec3 b) {\n    if(abs(a[0] - b[0]) <.001 &&  abs(a[1] - b[1]) <.001 && abs(a[2] - b[2]) <.001){\n        return true;\n    }\n    return false;\n}\n\nvoid main()\n{   \n    vec3 caculColor = flowColor;\n    vec3 finalColor = color;\n    float p;\n    float size = 40.;\n    for(int i = 0; i < flowIndex.length() ; i++) {\n        if(abs(flowIndex[i] - vIndex) < size) {\n            p =  smoothstep(0., 1.5, (vIndex - flowIndex[0]) / (2. * size + flowIndex[flowIndex.length() - 1] - flowIndex[0]));\n            break;\n        } else {\n            p = 0.;\n        }\n    }\n    \n    finalColor += (caculColor * p) * 1.5 ;\n\n    FragColor = vec4(finalColor, 1.0);\n}\n",{pointSize:1,varyings:{float:"index"}})}attrib(){this.mesh=r.a.bezier([[-130,90,0],[-55,-90,0],[75,-60,0],[100,80,0]],.005);const n=[];this.mesh.vertices.map((e,o)=>{n.push(o)}),this.mesh.bufferFlattenData(n,"index",1)}prepare(){this.orbital.radius=270,this._frame=0}uniform(){this._nextFrame()}_nextFrame(){const n=this.mesh.vertices.length/100,e=[],o=this._frame%100,i=(o+1)*n;for(let r=n*o;r<i;r++)e.push(r);console.log(e),this.prg.use(),this.prg.uniform("flowIndex","float",e),this._frame++}render(){s.a.clear();const n=t.b.create();this.prg.use(),this.prg.style({mMatrix:n,color:[.5,.5,.1],flowColor:[1,1,.1]}),s.a.draw(this.mesh)}}}}]);