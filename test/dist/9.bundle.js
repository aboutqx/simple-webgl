(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{128:function(e,t){e.exports="#version 300 es\nprecision mediump float;\n#define GLSLIFY 1\n\nin vec3 position;\nin vec3 normal;\nuniform   mat4 mMatrix;\nuniform   mat4 vpMatrix;\n\nout   vec3 vNormal;\nout vec3 WorldPos;\n\nvoid main(void){\n\n\tvec4 pos       = mMatrix * vec4(position, 1.0);\n\tgl_Position    = vpMatrix * pos;\n\n  vNormal = mat3(mMatrix) * normal;\n  WorldPos = pos.xyz;\n\n}\n"},129:function(e,t){e.exports="#version 300 es\nprecision mediump float;\n#define GLSLIFY 1\n\n// material parameters\nuniform vec3 albedo;\nuniform float metallic;\nuniform float roughness;\nuniform float ao;\n\n// IBL\nuniform samplerCube irradianceMap;\nuniform samplerCube prefilterMap;\nuniform sampler2D   brdfLUT;\n\nuniform bool lambertDiffuse;\nuniform vec3 lightPositions[4];\nuniform vec3 lightColors[4];\nuniform vec3 camPos;\n\nin vec3 vNormal;\nin vec3 WorldPos;\nout vec4 outColor;\n\n#define saturate(x) clamp(x, 0.0, 1.0)\nconst float PI = 3.14159265359;\n// D, G, F formula is refered from http://graphicrants.blogspot.tw/2013/08/specular-brdf-reference.html\n// ----------------------------------------------------------------------------\nfloat DistributionGGX(vec3 N, vec3 H, float roughness)\n{\n    float a = roughness*roughness;\n    float a2 = a*a;\n    float NdotH = max(dot(N, H), 0.0);\n    float NdotH2 = NdotH*NdotH;\n\n    float nom   = a2;\n    float denom = (NdotH2 * (a2 - 1.0) + 1.0);\n    denom = PI * denom * denom;\n\n    return nom / denom;//max(denom, 0.001); // prevent divide by zero for roughness=0.0 and NdotH=1.0\n}\n// ----------------------------------------------------------------------------\nfloat GeometrySchlickGGX(float NdotV, float roughness)\n{\n    float r = (roughness + 1.0);\n    float k = (r*r) / 8.0;\n\n    float nom   = NdotV;\n    float denom = NdotV * (1.0 - k) + k;\n\n    return nom / denom;\n}\n// ----------------------------------------------------------------------------\nfloat GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)\n{\n    float NdotV = max(dot(N, V), 0.0);\n    float NdotL = max(dot(N, L), 0.0);\n    float ggx2 = GeometrySchlickGGX(NdotV, roughness);\n    float ggx1 = GeometrySchlickGGX(NdotL, roughness);\n\n    return ggx1 * ggx2;\n}\n// ----------------------------------------------------------------------------\nvec3 fresnelSchlick(float cosTheta, vec3 F0)\n{\n    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);\n}\n// deal with IBL\nvec3 fresnelSchlickRoughness(float cosTheta, vec3 F0, float roughness)\n{\n    return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(1.0 - cosTheta, 5.0);\n}\n\n// OrenNayar diffuse\nvec3 getDiffuse( vec3 diffuseColor, float roughness4, float NoV, float NoL, float VoH )\n{\n\tfloat VoL = 2. * VoH - 1.;\n\tfloat c1 = 1. - 0.5 * roughness4 / (roughness4 + 0.33);\n\tfloat cosri = VoL - NoV * NoL;\n\tfloat c2 = 0.45 * roughness4 / (roughness4 + 0.09) * cosri * ( cosri >= 0. ? min( 1., NoL / NoV ) : NoL );\n\treturn diffuseColor / PI * ( NoL * c1 + c2 );\n}\n\nvoid main(void){\n    vec3 N = normalize(vNormal);\n    vec3 V = normalize(camPos - WorldPos);\n\n    vec3 F0 = vec3(0.04);\n    F0      = mix(F0, albedo, metallic);\n\n    // reflectance equation\n    vec3 Lo = vec3(0.0);\n    for(int i = 0; i < 4; ++i)\n    {\n        // calculate per-light radiance\n        vec3 L = normalize(lightPositions[i] - WorldPos);\n        vec3 H = normalize(V + L);\n\n        // get all the usefull dot products and clamp them between 0 and 1 just to be safe\n        float NoL\t\t\t\t= saturate( dot( N, L ) );\n        float NoV\t\t\t\t= saturate( dot( N, V ) );\n        float VoH\t\t\t\t= saturate( dot( V, H ) );\n        float NoH\t\t\t\t= saturate( dot( N, H ) );\n\n        float distance = length(lightPositions[i] - WorldPos);\n        float attenuation = 1.0 / (distance * distance);\n        vec3 radiance = lightColors[i] * attenuation;\n\n        // Cook-Torrance BRDF\n        float NDF = DistributionGGX(N, H, roughness);\n        float G   = GeometrySmith(N, V, L, roughness);\n        vec3 F    = fresnelSchlick(max(dot(H, V), 0.0), F0); //反射百分比\n\n        vec3 nominator    = NDF * G * F;\n        float denominator = 4. * max(dot(N, V), 0.0) * max(dot(N, L), 0.0);\n        vec3 specular = nominator / max(denominator, 0.001); // prevent divide by zero for NdotV=0.0 or NdotL=0.0\n\n        // kS is equal to Fresnel\n        vec3 kS = F;\n        // for energy conservation, the diffuse and specular light can't\n        // be above 1.0 (unless the surface emits light); to preserve this\n        // relationship the diffuse component (kD) should equal 1.0 - kS.\n        vec3 kD = vec3(1.0) - kS;\n        // multiply kD by the inverse metalness such that only non-metals\n        // have diffuse lighting, or a linear blend if partly metal (pure metals\n        // have no diffuse light).\n        kD *= 1.0 - metallic;\n\n        // scale light by NdotL\n        float NdotL = max(dot(N, L), 0.0);\n\n        vec3 diffuse = lambertDiffuse ? albedo / PI : getDiffuse( albedo, roughness, NoV, NoL, VoH );\n        // add to outgoing radiance Lo\n        Lo += (kD * diffuse + specular) * radiance * NdotL;  // note that we already multiplied the BRDF by the Fresnel (kS) so we won't multiply by kS again\n    }\n\n    // ambient lighting (we now use IBL as the ambient term)\n    vec3 F = fresnelSchlickRoughness(max(dot(N, V), 0.0), F0, roughness);\n\n    vec3 kS = F;\n    vec3 kD = 1.0 - kS;\n    kD *= 1.0 - metallic;\n\n    vec3 irradiance = texture(irradianceMap, N).rgb;\n    vec3 diffuse    = irradiance * albedo;\n\n    vec3 R = reflect(-V, N);\n    const float MAX_REFLECTION_LOD = 6.0;\n    vec3 prefilteredColor = textureLod(prefilterMap, R,  roughness * MAX_REFLECTION_LOD).rgb;\n    vec2 envBRDF  = texture(brdfLUT, vec2(max(dot(N, V), 0.0), roughness)).rg;\n    vec3 specular = prefilteredColor * (F * envBRDF.x + envBRDF.y);\n\n    vec3 ambient = (kD * diffuse + specular) * ao;\n\n    vec3 color =  ambient + Lo;\n\n    // HDR tonemapping\n    color = color / (color + vec3(1.0));\n    // gamma correct\n    color = pow(color, vec3(1.0/2.2));\n\n    outColor = vec4(color, 1.0);\n\n}\n"},130:function(e,t){e.exports="#version 300 es\nprecision mediump float;\n#define GLSLIFY 1\n\nin vec3 position;\nin vec3 normal;\nin vec2 texCoord;\nuniform   mat4 mMatrix;\nuniform   mat4 vpMatrix;\n\nout vec3 vNormal;\nout vec3 WorldPos;\nout vec2 TexCoords;\n\nvoid main(void){\n\n\tvec4 pos       = mMatrix * vec4(position, 1.0);\n\tgl_Position    = vpMatrix * pos;\n\n  vNormal = mat3(mMatrix) * normal;\n  WorldPos = pos.xyz;\n  TexCoords = texCoord;\n}\n"},131:function(e,t){e.exports="#version 300 es\nprecision mediump float;\n#define GLSLIFY 1\n\n\n// IBL\nuniform samplerCube irradianceMap;\nuniform samplerCube prefilterMap;\nuniform sampler2D   brdfLUT;\n\nuniform sampler2D albedoMap;\nuniform sampler2D normalMap;\nuniform sampler2D roughnessMap;\nuniform sampler2D metallicMap;\nuniform sampler2D aoMap;\n\nuniform bool lambertDiffuse;\nuniform vec3 lightPositions[4];\nuniform vec3 lightColors[4];\nuniform vec3 camPos;\n\nin vec3 vNormal;\nin vec3 WorldPos;\nin vec2 TexCoords;\nout vec4 outColor;\n\n#define saturate(x) clamp(x, 0.0, 1.0)\nconst float PI = 3.14159265359;\n// D, G, F formula is refered from http://graphicrants.blogspot.tw/2013/08/specular-brdf-reference.html\n// ----------------------------------------------------------------------------\nfloat DistributionGGX(vec3 N, vec3 H, float roughness)\n{\n    float a = roughness*roughness;\n    float a2 = a*a;\n    float NdotH = max(dot(N, H), 0.0);\n    float NdotH2 = NdotH*NdotH;\n\n    float nom   = a2;\n    float denom = (NdotH2 * (a2 - 1.0) + 1.0);\n    denom = PI * denom * denom;\n\n    return nom / denom;//max(denom, 0.001); // prevent divide by zero for roughness=0.0 and NdotH=1.0\n}\n// ----------------------------------------------------------------------------\nfloat GeometrySchlickGGX(float NdotV, float roughness)\n{\n    float r = (roughness + 1.0);\n    float k = (r*r) / 8.0;\n\n    float nom   = NdotV;\n    float denom = NdotV * (1.0 - k) + k;\n\n    return nom / denom;\n}\n// ----------------------------------------------------------------------------\nfloat GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)\n{\n    float NdotV = max(dot(N, V), 0.0);\n    float NdotL = max(dot(N, L), 0.0);\n    float ggx2 = GeometrySchlickGGX(NdotV, roughness);\n    float ggx1 = GeometrySchlickGGX(NdotL, roughness);\n\n    return ggx1 * ggx2;\n}\n// ----------------------------------------------------------------------------\nvec3 fresnelSchlick(float cosTheta, vec3 F0)\n{\n    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);\n}\n// deal with IBL\nvec3 fresnelSchlickRoughness(float cosTheta, vec3 F0, float roughness)\n{\n    return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(1.0 - cosTheta, 5.0);\n}\n\n// OrenNayar diffuse\nvec3 getDiffuse( vec3 diffuseColor, float roughness4, float NoV, float NoL, float VoH )\n{\n\tfloat VoL = 2. * VoH - 1.;\n\tfloat c1 = 1. - 0.5 * roughness4 / (roughness4 + 0.33);\n\tfloat cosri = VoL - NoV * NoL;\n\tfloat c2 = 0.45 * roughness4 / (roughness4 + 0.09) * cosri * ( cosri >= 0. ? min( 1., NoL / NoV ) : NoL );\n\treturn diffuseColor / PI * ( NoL * c1 + c2 );\n}\nvec3 getNormalFromMap()\n{\n    vec3 tangentNormal = texture(normalMap, TexCoords).xyz * 2.0 - 1.0;\n\n    vec3 Q1  = dFdx(WorldPos);\n    vec3 Q2  = dFdy(WorldPos);\n    vec2 st1 = dFdx(TexCoords);\n    vec2 st2 = dFdy(TexCoords);\n\n    vec3 N   = normalize(vNormal);\n    vec3 T  = normalize(Q1*st2.t - Q2*st1.t);\n    vec3 B  = -normalize(cross(N, T));\n    mat3 TBN = mat3(T, B, N);\n\n    return normalize(TBN * tangentNormal);\n}\n\nvoid main(void){\n    vec3 albedo     = pow(texture(albedoMap, TexCoords).rgb, vec3(2.2));\n    vec3 N     = getNormalFromMap();\n    float metallic  = texture(metallicMap, TexCoords).r;\n    float roughness = texture(roughnessMap, TexCoords).r;\n    float ao        = texture(aoMap, TexCoords).r;\n\n    vec3 V = normalize(camPos - WorldPos);\n\n    vec3 F0 = vec3(0.04);\n    F0      = mix(F0, albedo, metallic);\n\n    // reflectance equation\n    vec3 Lo = vec3(0.0);\n    for(int i = 0; i < 4; ++i)\n    {\n        // calculate per-light radiance\n        vec3 L = normalize(lightPositions[i] - WorldPos);\n        vec3 H = normalize(V + L);\n\n        // get all the usefull dot products and clamp them between 0 and 1 just to be safe\n        float NoL\t\t\t\t= saturate( dot( N, L ) );\n        float NoV\t\t\t\t= saturate( dot( N, V ) );\n        float VoH\t\t\t\t= saturate( dot( V, H ) );\n        float NoH\t\t\t\t= saturate( dot( N, H ) );\n\n        float distance = length(lightPositions[i] - WorldPos);\n        float attenuation = 1.0 / (distance * distance);\n        vec3 radiance = lightColors[i] * attenuation;\n\n        // Cook-Torrance BRDF\n        float NDF = DistributionGGX(N, H, roughness);\n        float G   = GeometrySmith(N, V, L, roughness);\n        vec3 F    = fresnelSchlick(max(dot(H, V), 0.0), F0); //反射百分比\n\n        vec3 nominator    = NDF * G * F;\n        float denominator = 4. * max(dot(N, V), 0.0) * max(dot(N, L), 0.0);\n        vec3 specular = nominator / max(denominator, 0.001); // prevent divide by zero for NdotV=0.0 or NdotL=0.0\n\n        // kS is equal to Fresnel\n        vec3 kS = F;\n        // for energy conservation, the diffuse and specular light can't\n        // be above 1.0 (unless the surface emits light); to preserve this\n        // relationship the diffuse component (kD) should equal 1.0 - kS.\n        vec3 kD = vec3(1.0) - kS;\n        // multiply kD by the inverse metalness such that only non-metals\n        // have diffuse lighting, or a linear blend if partly metal (pure metals\n        // have no diffuse light).\n        kD *= 1.0 - metallic;\n\n        // scale light by NdotL\n        float NdotL = max(dot(N, L), 0.0);\n\n        vec3 diffuse = lambertDiffuse ? albedo / PI : getDiffuse( albedo, roughness, NoV, NoL, VoH );\n        // add to outgoing radiance Lo\n        Lo += (kD * diffuse + specular) * radiance * NdotL;  // note that we already multiplied the BRDF by the Fresnel (kS) so we won't multiply by kS again\n    }\n\n    // ambient lighting (we now use IBL as the ambient term)\n    vec3 F = fresnelSchlickRoughness(max(dot(N, V), 0.0), F0, roughness);\n\n    vec3 kS = F;\n    vec3 kD = 1.0 - kS;\n    kD *= 1.0 - metallic;\n\n    vec3 irradiance = texture(irradianceMap, N).rgb;\n    vec3 diffuse    = irradiance * albedo;\n\n    vec3 R = reflect(-V, N);\n    const float MAX_REFLECTION_LOD = 4.0;\n    vec3 prefilteredColor = textureLod(prefilterMap, R,  roughness * MAX_REFLECTION_LOD).rgb;\n    vec2 envBRDF  = texture(brdfLUT, vec2(max(dot(N, V), 0.0), roughness)).rg;\n    vec3 specular = prefilteredColor * (F * envBRDF.x + envBRDF.y);\n\n    vec3 ambient = (kD * diffuse + specular) * ao;\n\n    vec3 color = ambient + Lo;\n\n    // HDR tonemapping\n    color = color / (color + vec3(1.0));\n    // gamma correct\n    color = pow(color, vec3(1.0/2.2));\n\n    outColor = vec4(color, 1.0);\n\n}\n"},16:function(e,t){e.exports="#version 300 es\n#define GLSLIFY 1\nin vec3 position;\nin vec2 texCoord;\nuniform   mat4 mMatrix;\nuniform   mat4 vpMatrix;\n\nout vec3 WorldPos;\nout vec2 vUv;\nvoid main(void){\n  vec4 pos       = mMatrix * vec4(position, 1.0);\n\tgl_Position    = vpMatrix * pos;\n\n  WorldPos = pos.xyz;\n  vUv = texCoord;\n}\n"},21:function(e,t){e.exports="#version 300 es\nprecision mediump float;\n#define GLSLIFY 1\n\nuniform sampler2D equirectangularMap;\nin vec3 WorldPos;\nin vec2 vUv;\nout vec4 outColor;\n\nconst vec2 invAtan = vec2(0.1591, 0.3183);\nvec2 SampleSphericalMap(vec3 v)\n{\n    vec2 uv = vec2(atan(v.z, v.x), asin(v.y)); // [-PI/2,PI/2]\n    uv *= invAtan; //[-.5,.5]\n    uv += 0.5;\n    return uv;\n}\n\nvoid main()\n{\n    vec2 uv = SampleSphericalMap(normalize(WorldPos));\n    vec3 color = textureLod(equirectangularMap, uv, 0.).rgb;\n\n    outColor = vec4(color, 1.0);\n    // gl_FragColor = vec4(WorldPos,1.);\n}\n"},22:function(e,t){e.exports="#version 300 es\n#define GLSLIFY 1\nin vec3 position;\nuniform   mat4 mMatrix;\nuniform   mat4 vMatrix;\nuniform   mat4 pMatrix;\n\nout vec3 WorldPos;\n\nvoid main()\n{\n  mat4 rotView = mat4(mat3(vMatrix)); // remove translation from the view matrix\n  vec4 pos       = mMatrix * vec4(position, 1.0);\n\tvec4 clipPos    = pMatrix * rotView * pos;\n\tgl_Position = clipPos.xyww; // 设置深度测试的z为1，这样只会在没有遮挡时渲染skybox，节省性能\n\n  WorldPos = pos.xyz;\n}\n"},23:function(e,t){e.exports="#version 300 es\nprecision mediump float;\n#define GLSLIFY 1\n\nuniform samplerCube environmentMap;\nin vec3 WorldPos;\nout vec4 outColor;\nvoid main()\n{\n    vec3 envColor = textureLod(environmentMap, WorldPos, 0.).rgb;\n\n    // HDR tonemap and gamma correct\n    envColor = envColor / (envColor + vec3(1.0));\n    envColor = pow(envColor, vec3(1.0/2.2));\n\n    outColor = vec4(envColor, 1.0);\n}\n"},24:function(e,t){e.exports="#version 300 es\n#define GLSLIFY 1\n\nin vec3 position;\nin vec2 texCoord;\nout vec2 TexCoords;\n\nvoid main(void) {\n  gl_Position = vec4(position, 1.);\n  TexCoords = texCoord;\n\n}\n"},25:function(e,t){e.exports="#version 300 es\nprecision mediump float;\n#define GLSLIFY 1\nout vec2 FragColor;\nin vec2 TexCoords;\n\nconst float PI = 3.14159265359;\n// ----------------------------------------------------------------------------\n// http://holger.dammertz.org/stuff/notes_HammersleyOnHemisphere.html\n// efficient VanDerCorpus calculation.\nfloat RadicalInverse_VdC(uint bits)\n{\n     bits = (bits << 16u) | (bits >> 16u);\n     bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);\n     bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);\n     bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);\n     bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);\n     return float(bits) * 2.3283064365386963e-10; // / 0x100000000\n}\n// ----------------------------------------------------------------------------\nvec2 Hammersley(uint i, uint N)\n{\n\treturn vec2(float(i)/float(N), RadicalInverse_VdC(i));\n}\n// ----------------------------------------------------------------------------\nvec3 ImportanceSampleGGX(vec2 Xi, vec3 N, float roughness)\n{\n\tfloat a = roughness*roughness;\n\n\tfloat phi = 2.0 * PI * Xi.x;\n\tfloat cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a*a - 1.0) * Xi.y));\n\tfloat sinTheta = sqrt(1.0 - cosTheta*cosTheta);\n\n\t// from spherical coordinates to cartesian coordinates - halfway vector\n\tvec3 H;\n\tH.x = cos(phi) * sinTheta;\n\tH.y = sin(phi) * sinTheta;\n\tH.z = cosTheta;\n\n\t// from tangent-space H vector to world-space sample vector\n\tvec3 up          = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);\n\tvec3 tangent   = normalize(cross(up, N));\n\tvec3 bitangent = cross(N, tangent);\n\n\tvec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;\n\treturn normalize(sampleVec);\n}\n// ----------------------------------------------------------------------------\nfloat GeometrySchlickGGX(float NdotV, float roughness)\n{\n    // note that we use a different k for IBL\n    float a = roughness;\n    float k = (a * a) / 2.0;\n\n    float nom   = NdotV;\n    float denom = NdotV * (1.0 - k) + k;\n\n    return nom / denom;\n}\n// ----------------------------------------------------------------------------\nfloat GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)\n{\n    float NdotV = max(dot(N, V), 0.0);\n    float NdotL = max(dot(N, L), 0.0);\n    float ggx2 = GeometrySchlickGGX(NdotV, roughness);\n    float ggx1 = GeometrySchlickGGX(NdotL, roughness);\n\n    return ggx1 * ggx2;\n}\n// ----------------------------------------------------------------------------\nvec2 IntegrateBRDF(float NdotV, float roughness)\n{\n    vec3 V;\n    V.x = sqrt(1.0 - NdotV*NdotV);\n    V.y = 0.0;\n    V.z = NdotV;\n\n    float A = 0.0;\n    float B = 0.0;\n\n    vec3 N = vec3(0.0, 0.0, 1.0);\n\n    const uint SAMPLE_COUNT = 1024u;\n    for(uint i = 0u; i < SAMPLE_COUNT; ++i)\n    {\n        // generates a sample vector that's biased towards the\n        // preferred alignment direction (importance sampling).\n        vec2 Xi = Hammersley(i, SAMPLE_COUNT);\n        vec3 H = ImportanceSampleGGX(Xi, N, roughness);\n        vec3 L = normalize(2.0 * dot(V, H) * H - V);\n\n        float NdotL = max(L.z, 0.0);\n        float NdotH = max(H.z, 0.0);\n        float VdotH = max(dot(V, H), 0.0);\n\n        if(NdotL > 0.0)\n        {\n            float G = GeometrySmith(N, V, L, roughness);\n            float G_Vis = (G * VdotH) / (NdotH * NdotV);\n            float Fc = pow(1.0 - VdotH, 5.0);\n\n            A += (1.0 - Fc) * G_Vis;\n            B += Fc * G_Vis;\n        }\n    }\n    A /= float(SAMPLE_COUNT);\n    B /= float(SAMPLE_COUNT);\n    return vec2(A, B);\n}\n// ----------------------------------------------------------------------------\nvoid main()\n{\n    vec2 integratedBRDF = IntegrateBRDF(TexCoords.x, TexCoords.y);\n    FragColor = integratedBRDF;\n    // FragColor = vec4(integratedBRDF,0. ,1.);\n}\n"},4:function(e,t){var n=0,o=3553;function r(e,t,n){return 9728|+e|+t<<8|+(t&&n)<<1}function a(e,t){return this._uid=n++,this.gl=e,this.id=this.gl.createTexture(),this.width=0,this.height=0,this.format=t||e.RGB,this.type=e.UNSIGNED_BYTE,this.img=null,e.bindTexture(o,this.id),this.setFilter(!0),this}a.prototype={fromImage:function(e){var t=this.gl;return this.img=e,this.width=e.width,this.height=e.height,t.bindTexture(o,this.id),t.texImage2D(o,0,this.format,this.format,this.type,e),this},fromData:function(e,t,n,r){var a=this.gl;return this.width=e,this.height=t,n=n||null,this.type=r||a.UNSIGNED_BYTE,a.bindTexture(o,this.id),window.useWebgl2?r===a.RGBA16F?a.texImage2D(a.TEXTURE_2D,0,this.type,e,t,0,this.format,a.HALF_FLOAT,n):r===a.RG32F||r===a.RGBA32F||r===a.RGB32F?a.texImage2D(a.TEXTURE_2D,0,this.type,e,t,0,this.format,a.FLOAT,n):a.texImage2D(o,0,this.format,e,t,0,this.format,this.type,n):a.texImage2D(o,0,this.format,e,t,0,this.format,this.type,n),this},bind:function(e){var t=this.gl;void 0!==e&&t.activeTexture(t.TEXTURE0+(0|e)),t.bindTexture(o,this.id)},dispose:function(){this.gl&&this.gl.deleteTexture(this.id),this.id=null,this.gl=null},setFilter:function(e,t,n){var a=this.gl,i=r(!!e,!!t,!!n);a.texParameteri(o,a.TEXTURE_MAG_FILTER,r(!!e,!1,!1)),a.texParameteri(o,a.TEXTURE_MIN_FILTER,i)},repeat:function(){this.wrap(this.gl.REPEAT)},clamp:function(){this.wrap(this.gl.CLAMP_TO_EDGE)},mirror:function(){this.wrap(this.gl.MIRRORED_REPEAT)},wrap:function(e){var t=this.gl;t.texParameteri(o,t.TEXTURE_WRAP_S,e),t.texParameteri(o,t.TEXTURE_WRAP_T,e)}},e.exports=a},59:function(e,t,n){"use strict";n.r(t),n.d(t,"default",function(){return S});var o=n(7),r=n(2),a=n(5),i=n(0),s=n(128),c=n.n(s),l=n(129),u=n.n(l),f=n(130),d=n.n(f),m=n(131),h=n.n(m),v=n(16),p=n.n(v),g=n(21),x=n.n(g),b=n(22),T=n.n(b),N=n(23),F=n.n(N),E=n(24),L=n.n(E),R=n(25),M=n.n(R),P=n(11),C=n(15),_=n.n(C),V=n(6),D=n(1),A=n(3),y=n(4),G=n.n(y),U=n(9),B=n(12);const I=7,w=7,k=.42;class S extends a.default{constructor(){super(),Object(r.a)(this,"count",0)}init(){i.c.getExtension("OES_texture_float_linear"),i.c.getExtension("EXT_color_buffer_float"),this.prg=this.compile(c.a,u.a),this.mapPrg=this.compile(d.a,h.a),this.cubePrg=this.compile(p.a,x.a),this.skyboxPrg=this.compile(T.a,F.a),this.brdfPrg=this.compile(L.a,M.a)}attrib(){let{pos:e,index:t,normal:n,uv:o}=Object(V.Sphere)(256,256,.15),r=new A.a;r.bufferVertex(e),r.bufferIndex(t),r.bufferNormal(n),r.bufferTexCoord(o),this.sphere=r;let a=new A.a;a.bufferData(V.CubeData,["position","normal","texCoord"],[3,3,2]),this.cube=a;this.planeBuffer=new P.a(i.c,new Float32Array([3,-.5,3,1,0,-3,-.5,3,0,0,-3,-.5,-3,0,1,3,-.5,3,1,0,-3,-.5,-3,0,1,3,-.5,-3,1,1])),this.planeBuffer.attrib("position",3,i.c.FLOAT),this.planeBuffer.attrib("texCoord",2,i.c.FLOAT),this.planeVao=new _.a(i.c),this.planeVao.setup(this.cubePrg,[this.planeBuffer]);let s=new A.a;s.bufferData([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0],["position","texCoord"],[3,2]),this.quad=s}prepare(){i.c.enable(i.c.DEPTH_TEST),i.c.depthFunc(i.c.LEQUAL),i.c.pixelStorei(i.c.UNPACK_FLIP_Y_WEBGL,!0);let e=D.b.identity(D.b.create()),t=D.b.identity(D.b.create()),n=D.b.identity(D.b.create()),o=D.b.identity(D.b.create());D.b.perspective(e,Object(i.d)(90),1,.1,100);const r=[[D.e.fromValues(0,0,0),D.e.fromValues(1,0,0),D.e.fromValues(0,-1,0)],[D.e.fromValues(0,0,0),D.e.fromValues(-1,0,0),D.e.fromValues(0,-1,0)],[D.e.fromValues(0,0,0),D.e.fromValues(0,1,0),D.e.fromValues(0,0,1)],[D.e.fromValues(0,0,0),D.e.fromValues(0,-1,0),D.e.fromValues(0,0,-1)],[D.e.fromValues(0,0,0),D.e.fromValues(0,0,1),D.e.fromValues(0,-1,0)],[D.e.fromValues(0,0,0),D.e.fromValues(0,0,-1),D.e.fromValues(0,-1,0)]];let a=Object(U.a)(getAssets.equirectangular);console.log("hdrInfo",a),this.hdrTexture=new G.a(i.c),i.c.bindTexture(i.c.TEXTURE_2D,this.hdrTexture.id),i.c.texImage2D(i.c.TEXTURE_2D,0,i.c.RGBA32F,a.shape[0],a.shape[1],0,i.c.RGBA,i.c.FLOAT,a.data),this.hdrTexture.clamp();let s=i.c.createTexture();i.c.bindTexture(i.c.TEXTURE_CUBE_MAP,s);for(var c=0;c<6;c++)i.c.texImage2D(i.c.TEXTURE_CUBE_MAP_POSITIVE_X+c,0,i.c.RGBA32F,512,512,0,i.c.RGBA,i.c.FLOAT,null);i.c.texParameteri(i.c.TEXTURE_CUBE_MAP,i.c.TEXTURE_WRAP_S,i.c.CLAMP_TO_EDGE),i.c.texParameteri(i.c.TEXTURE_CUBE_MAP,i.c.TEXTURE_WRAP_T,i.c.CLAMP_TO_EDGE),i.c.texParameteri(i.c.TEXTURE_CUBE_MAP,i.c.TEXTURE_MIN_FILTER,i.c.LINEAR_MIPMAP_LINEAR),i.c.texParameteri(i.c.TEXTURE_CUBE_MAP,i.c.TEXTURE_MAG_FILTER,i.c.LINEAR),this.cubemapTexture=s,this.cubePrg.use(),this.hdrTexture.bind(0),i.c.viewport(0,0,512,512);let l=i.c.createFramebuffer();i.c.bindFramebuffer(i.c.FRAMEBUFFER,l);for(let a=0;a<6;a++)D.b.lookAt(n,r[a][0],r[a][1],r[a][2]),D.b.multiply(o,e,n),this.cubePrg.style({equirectangularMap:0,vpMatrix:o,mMatrix:t}),i.c.framebufferTexture2D(i.c.FRAMEBUFFER,i.c.COLOR_ATTACHMENT0,i.c.TEXTURE_CUBE_MAP_POSITIVE_X+a,this.cubemapTexture,0),i.c.clear(i.c.COLOR_BUFFER_BIT|i.c.DEPTH_BUFFER_BIT),this.cube.bind(this.cubePrg,["position","texCoord"]),this.cube.draw();const u=i.c.checkFramebufferStatus(i.c.FRAMEBUFFER);u!=i.c.FRAMEBUFFER_COMPLETE&&console.log(`gl.checkFramebufferStatus() returned ${u.toString(16)}`),i.c.bindFramebuffer(i.c.FRAMEBUFFER,null),this.brdfLUTTexture=new G.a(i.c,i.c.RG).fromData(512,512,null,i.c.RG32F),this.brdfLUTTexture.bind(),this.brdfLUTTexture.clamp(),i.c.bindFramebuffer(i.c.FRAMEBUFFER,l),i.c.framebufferTexture2D(i.c.FRAMEBUFFER,i.c.COLOR_ATTACHMENT0,i.c.TEXTURE_2D,this.brdfLUTTexture.id,0),i.c.viewport(0,0,512,512),this.brdfPrg.use(),i.c.clear(i.c.COLOR_BUFFER_BIT|i.c.DEPTH_BUFFER_BIT),this.quad.bind(this.brdfPrg),this.quad.draw(i.c.TRIANGLE_STRIP),i.c.bindFramebuffer(i.c.FRAMEBUFFER,null);let f=Object(U.a)(getAssets.irradiancePosX),d=Object(U.a)(getAssets.irradianceNegX),m=Object(U.a)(getAssets.irradiancePosY),h=Object(U.a)(getAssets.irradianceNegY),v=Object(U.a)(getAssets.irradiancePosZ),p=Object(U.a)(getAssets.irradianceNegZ);this.irradianceMap=new B.a([f,d,m,h,v,p]),this.prefilterMap=B.a.parseDDS(getAssets.radiance)}uniform(){this.vMatrix=D.b.identity(D.b.create()),this.pMatrix=D.b.identity(D.b.create()),this.tmpMatrix=D.b.create();let e=[],t=[];D.e.transformQuat(e,[0,0,3],this.rotateQ),D.e.transformQuat(t,[0,1,0],this.rotateQ),this.eyeDirection=e,D.b.lookAt(this.vMatrix,e,[0,0,0],t),D.b.perspective(this.pMatrix,Object(i.d)(45),i.b.clientWidth/i.b.clientHeight,.1,100),D.b.multiply(this.tmpMatrix,this.pMatrix,this.vMatrix)}_setGUI(){this.addGUIParams({lambertDiffuse:!0,orenNayarDiffuse:!1,map:"none"});let e=this.gui.addFolder("diffuse model");e.add(this.params,"lambertDiffuse").listen().onChange(()=>{this.setChecked("lambertDiffuse")}),e.add(this.params,"orenNayarDiffuse").listen().onChange(()=>{this.setChecked("orenNayarDiffuse")}),e.open();let t=this.gui.addFolder("material map");t.add(this.params,"map",["none","plastic","wall","gold","grass","rusted_iron","wood"]).listen().onChange(()=>{this.setTexture()}),t.open()}setChecked(e){this.params.lambertDiffuse=!1,this.params.orenNayarDiffuse=!1,this.params[e]=!0}setTexture(){let e=this.params.map;"none"!==e&&(this.texture0=new G.a(i.c,i.c.RGBA).fromImage(getAssets[e+"Albedo"]),this.texture1=new G.a(i.c,i.c.RGBA).fromImage(getAssets[e+"Roughness"]),this.texture2=new G.a(i.c,i.c.RGBA).fromImage(getAssets[e+"Metallic"]),this.texture3=new G.a(i.c,i.c.RGBA).fromImage(getAssets[e+"Ao"]),this.texture4=new G.a(i.c,i.c.RGBA).fromImage(getAssets[e+"Normal"]))}render(){i.c.viewport(0,0,i.b.width,i.b.height),i.c.clearColor(.3,.3,.3,1),i.c.clearDepth(1),i.c.clear(i.c.COLOR_BUFFER_BIT|i.c.DEPTH_BUFFER_BIT);let e=D.b.identity(D.b.create()),t={vpMatrix:this.tmpMatrix,lightPositions:[-10,10,10,10,10,10,-10,-10,10,10,-10,10],lightColors:new Array(12).fill(300),camPos:this.eyeDirection,lambertDiffuse:this.params.lambertDiffuse};if("none"===this.params.map){this.prg.use(),i.c.activeTexture(i.c.TEXTURE0),i.c.bindTexture(i.c.TEXTURE_CUBE_MAP,this.irradianceMap.texture),i.c.activeTexture(i.c.TEXTURE1),i.c.bindTexture(i.c.TEXTURE_CUBE_MAP,this.prefilterMap.texture),i.c.activeTexture(i.c.TEXTURE2),i.c.bindTexture(i.c.TEXTURE_2D,this.brdfLUTTexture.id),this.prg.style(Object(o.a)({},t,{albedo:[.5,0,0],ao:1,irradianceMap:0,prefilterMap:1,brdfLUT:2})),this.sphere.bind(this.prg,["position","normal"]);for(let t=0;t<I;t++){this.prg.style({metallic:t/I});for(let n=0;n<w;n++)D.b.translate(e,D.b.create(),[(n-w/2)*k,(t-I/2)*k,0]),this.prg.style({roughness:H(n/w,.05,1),mMatrix:e}),this.sphere.draw()}}else this.mapPrg.use(),this.texture0.bind(0),this.texture1.bind(1),this.texture2.bind(2),this.texture3.bind(3),this.texture4.bind(4),i.c.activeTexture(i.c.TEXTURE5),i.c.bindTexture(i.c.TEXTURE_CUBE_MAP,this.irradianceMap.texture),i.c.activeTexture(i.c.TEXTURE6),i.c.bindTexture(i.c.TEXTURE_CUBE_MAP,this.prefilterMap.texture),i.c.activeTexture(i.c.TEXTURE7),i.c.bindTexture(i.c.TEXTURE_2D,this.brdfLUTTexture),D.b.scale(e,e,[2,2,2]),this.mapPrg.style(Object(o.a)({},t,{mMatrix:e,albedoMap:0,roughnessMap:1,metallicMap:2,aoMap:3,normalMap:4,irradianceMap:5,prefilterMap:6,brdfLUT:7})),this.sphere.bind(this.mapPrg),this.sphere.draw();this.skyboxPrg.use(),i.c.activeTexture(i.c.TEXTURE0),i.c.bindTexture(i.c.TEXTURE_CUBE_MAP,this.cubemapTexture),this.skyboxPrg.style({environmentMap:0,vMatrix:this.vMatrix,pMatrix:this.pMatrix,mMatrix:D.b.identity(D.b.create())}),this.cube.bind(this.skyboxPrg,["position"]),this.cube.draw()}}function H(e,t,n){return t>n?H(e,n,t):e<t?t:e>n?n:e}}}]);