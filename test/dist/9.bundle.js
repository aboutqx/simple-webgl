(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{44:function(e,t,r){"use strict";r.d(t,"a",(function(){return n}));var i=r(0);class n{constructor(e,t){this._mesh=e,this._shader=t}draw(e){this._shader.bind(),this._shader.style(e),i.a.draw(this._mesh)}get mesh(){return this._mesh}get shader(){return this._shader}}},45:function(e,t,r){"use strict";var i=r(0),n=r(3);let o,a;t.a=class{constructor(e,t,r={},n=1){o=!window.useWebgl2&&i.c.getExtension("WEBGL_depth_texture"),this.width=e||i.b.width,this.height=t||i.b.height,this._numTargets=n,this._multipleTargets=n>1,1==r.hdr?this._parameters={internalFormat:i.c.RGBA16F,type:i.c.HALF_FLOAT,minFilter:r.minFilter,maxFilter:r.magFilter}:this._parameters=r,window.useWebgl2||(a=i.c.getExtension("WEBGL_draw_buffers")),this._multipleTargets&&this._checkMaxNumRenderTarget(),this._init()}_init(){if(this._initTextures(),this.frameBuffer=i.c.createFramebuffer(),i.c.bindFramebuffer(i.c.FRAMEBUFFER,this.frameBuffer),window.useWebgl2){if(0===this._numTargets)i.c.readBuffer(i.c.NONE),i.c.drawBuffers([i.c.NONE]);else{const e=[];for(let t=0;t<this._numTargets;t++)i.c.framebufferTexture2D(i.c.DRAW_FRAMEBUFFER,i.c.COLOR_ATTACHMENT0+t,i.c.TEXTURE_2D,this._textures[t].texture,0),e.push(i.c["COLOR_ATTACHMENT"+t]);i.c.drawBuffers(e)}i.c.framebufferTexture2D(i.c.DRAW_FRAMEBUFFER,i.c.DEPTH_ATTACHMENT,i.c.TEXTURE_2D,this.glDepthTexture.texture,0)}else{for(let e=0;e<this._numTargets;e++)i.c.framebufferTexture2D(i.c.FRAMEBUFFER,i.c.COLOR_ATTACHMENT0+e,i.c.TEXTURE_2D,this._textures[e].texture,0);if(this._multipleTargets){const e=[];for(let t=0;t<this._numTargets;t++)e.push(a[`COLOR_ATTACHMENT${t}_WEBGL`]);a.drawBuffersWEBGL(e)}o&&i.c.framebufferTexture2D(i.c.FRAMEBUFFER,i.c.DEPTH_ATTACHMENT,i.c.TEXTURE_2D,this.glDepthTexture.texture,0)}i.c.checkFramebufferStatus(i.c.FRAMEBUFFER)!=i.c.FRAMEBUFFER_COMPLETE&&console.log("gl.checkFramebufferStatus() returned "+status.toString(16)),i.c.bindTexture(i.c.TEXTURE_2D,null),i.c.bindRenderbuffer(i.c.RENDERBUFFER,null),i.c.bindFramebuffer(i.c.FRAMEBUFFER,null),this.clear()}_checkMaxNumRenderTarget(){const e=window.useWebgl2?i.c.getParameter(i.c.MAX_DRAW_BUFFERS):i.c.getParameter(a.MAX_DRAW_BUFFERS_WEBGL);this._numTargets>e&&(console.error("Over max number of draw buffers supported : ",e),this._numTargets=e)}_initTextures(){this._textures=[];for(let e=0;e<this._numTargets;e++){const e=this._createTexture();this._textures.push(e)}window.useWebgl2?this.glDepthTexture=this._createTexture(i.c.DEPTH_COMPONENT16,i.c.UNSIGNED_SHORT,i.c.DEPTH_COMPONENT,{minFilter:i.c.NEAREST,magFilter:i.c.NEAREST}):this.glDepthTexture=this._createTexture(i.c.DEPTH_COMPONENT,i.c.UNSIGNED_SHORT,i.c.DEPTH_COMPONENT,{minFilter:i.c.LINEAR})}_createTexture(e,t,r,o={}){const a=Object.assign({},this._parameters);a.internalFormat=e||a.internalFormat,a.format=r||a.format||i.c.RGBA,a.type=t||a.type||i.c.UNSIGNED_BYTE;for(const e in o)a[e]=o[e];return new n.a(null,a,this.width,this.height)}bind(e=!0){e&&i.c.viewport(0,0,this.width,this.height),i.c.bindFramebuffer(i.c.FRAMEBUFFER,this.frameBuffer),i.a.clear(0,0,0,1)}unbind(e=!0){e&&i.c.viewport(0,0,i.b.width,i.b.height),i.c.bindFramebuffer(i.c.FRAMEBUFFER,null),this._textures.forEach(e=>{e.generateMipmap()})}clear(e=0,t=0,r=0,n=0){this.bind(),i.a.clear(e,t,r,n),this.unbind()}get textures(){return this._textures}getTexture(e=0){return this._textures[e]}get depthTexture(){return this.glDepthTexture}get minFilter(){return this._textures[0].minFilter}set minFilter(e){this._textures.forEach(t=>{t.minFilter=e})}get magFilter(){return this._textures[0].magFilter}set magFilter(e){this._textures.forEach(t=>{t.magFilter=e})}get wrapS(){return this._textures[0].wrapS}set wrapS(e){this._textures.forEach(t=>{t.wrapS=e})}get wrapT(){return this._textures[0].wrapT}set wrapT(e){this._textures.forEach(t=>{t.wrapT=e})}showParameters(){this._textures[0].showParameters()}get numTargets(){return this._numTargets}}},48:function(e,t,r){"use strict";r.d(t,"a",(function(){return s}));var i=r(13),n=r(15),o=r(42),a=r(44);class s extends a.a{constructor(e,t){const r=new n.a(i.g,i.f);super(o.a.skybox(e),r),this.skyMap=t}draw(e){e&&(this.skyMap=e),super.draw({uGamma:2.2,uExposure:5,tex:this.skyMap})}}},94:function(e,t,r){"use strict";r.r(t),r.d(t,"default",(function(){return u}));var i=r(43),n=r(45),o=r(48),a=r(42),s=r(1),c=r(0);class u extends i.a{constructor(){super()}init(){c.a.applyHdrExtension(),this.terrainPrg=this.compile("#version 300 es\n// basic.vert\n\n#define SHADER_NAME BASIC_VERTEX\n\nprecision highp float;\n#define GLSLIFY 1\nin vec3 position;\nin vec2 texCoord;\nin vec3 normal;\n\nuniform mat4 mMatrix;\nuniform mat4 uViewMatrix;\nuniform mat4 uProjectionMatrix;\nuniform float waterRadius;\nuniform float terrainHeight;\n\nout vec2 vTexCoord;\nout vec3 vNormal;\n\nfloat rand(float _x) {\n    return fract(sin(_x)*1e4);\n}\nfloat rand (vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nvoid main(void) {\n    vec3 Position;\n    if(distance(position, vec3(0,0,0)) > (waterRadius + rand(position.xz) * 10.))\n        Position = vec3(position.x, rand(position.xz) * terrainHeight, position.z);\n    else \n        Position = vec3(position.x, -.1, position.z);\n    gl_Position = uProjectionMatrix * uViewMatrix * mMatrix * vec4(Position, 1.0);\n    vTexCoord = texCoord;\n    vNormal = normal;\n}","#version 300 es\nprecision highp float;\n#define GLSLIFY 1\n// basic.frag\n\nin vec2 vTexCoord;\nuniform sampler2D texture0;\nout vec4 FragColor;\n\nvoid main(void) {\n    FragColor = texture(texture0, vTexCoord);\n    //FragColor = vec4(.0, .7, .5, 1.);\n}"),this.waterPrg=this.compile("#version 300 es\n// basic.vert\n\n#define SHADER_NAME BASIC_VERTEX\n\nprecision highp float;\n#define GLSLIFY 1\nin vec3 position;\nin vec2 texCoord;\nin vec3 normal;\n\nuniform mat4 mMatrix;\nuniform mat4 uViewMatrix;\nuniform mat4 uProjectionMatrix;\nuniform vec3 lightPositon;\nuniform vec3 uCameraPos;\n\nout vec2 vTexCoord;\nout vec3 vNormal;\nout vec4 clipSpace;\nout vec3 vToLightVector;\nout vec3 vToCameraVector;\n\nvoid main(void) {\n    vec4 worldPosition = mMatrix * vec4(position, 1.0);\n    clipSpace = uProjectionMatrix * uViewMatrix * worldPosition;\n    gl_Position = clipSpace;\n    vTexCoord = texCoord;\n    vNormal = normal;\n    vToLightVector = lightPositon - worldPosition.xyz/worldPosition.w;\n    vToCameraVector = uCameraPos - worldPosition.xyz/worldPosition.w;\n}","#version 300 es\nprecision highp float;\n#define GLSLIFY 1\n// basic.frag\nin vec4 clipSpace;\nin vec2 vTexCoord;\nin vec3 vToLightVector;\nin vec3 vToCameraVector;\n\nuniform sampler2D reflectionTexture;\nuniform sampler2D dudvMap;\nuniform sampler2D normalMap;\nuniform float count;\nuniform float waveStrength;\nuniform vec3 lightColor;\nout vec4 FragColor;\n\nvoid main(void) {\n    vec3  diffuseColor = vec3(0., 0.3, 0.5);\n    vec2 ndc = clipSpace.xy / clipSpace.w / 2. + .5;\n    vec2 reflectionTexCoord = vec2(1.-ndc.x ,ndc.y);\n\n    float moveFactor = fract(count) * .3;\n    vec2 distortedvTexCoord = texture(dudvMap, vec2(vTexCoord.x + moveFactor, vTexCoord.y)).rg*0.1;\n\tdistortedvTexCoord = vTexCoord + vec2(distortedvTexCoord.x, distortedvTexCoord.y+moveFactor);\n\tvec2 totalDistortion = (texture(dudvMap, distortedvTexCoord).rg * 2.0 - 1.0) * waveStrength;\n    reflectionTexCoord += totalDistortion;\n\n    vec3 reflection = texture(reflectionTexture, reflectionTexCoord).rgb;\n    vec4 normalMapColor = texture(normalMap, distortedvTexCoord);\n    vec3 normal = vec3(normalMapColor.r * 2. - 1., normalMapColor.g, normalMapColor.b * 2. - 1.);\n    normal = normalize(normal);\n\n    vec3  halfLE    = normalize(vToLightVector + vToCameraVector);\n    float specular  = pow(clamp(dot(normal, halfLE), 0.0, 1.0), 50.0);\n    float reflectivity = .2;\n    vec3 specularHightlights = lightColor * specular * reflectivity;\n\n    vec3 mixColor = mix(reflection,  diffuseColor, .3);\n    mixColor += specularHightlights;\n    FragColor = vec4(mixColor, 1.);\n    //FragColor = vec4(reflectionTexCoord.x + .7,0., 0.,1.);\n}")}attrib(){this.skybox=new o.a(400,getAssets.dimskybox);this.terrainPlane=a.a.plane(350,350,20,"xz"),this.waterPlane=a.a.plane(300,300,100,"xz")}prepare(){this.orbital.radius=120,this.orbital.offset=[0,22,18],this.terrainTexture=getAssets.terrain,this.terrainTexture.repeat(),this._relectionFbo=new n.a(c.b.width,c.b.height,{hdr:!0}),this._relectionFbo.getTexture().repeat()}uniform(){const e=s.b.create();s.b.translate(e,e,[0,-10,0]),this.terrainPrg.use(),this.terrainPrg.style({mMatrix:e,texture0:this.terrainTexture}),s.b.identity(e),s.b.translate(e,e,[0,-10,0]),this.waterPrg.use(),this.waterPrg.style({mMatrix:e})}_renderScene(){this.skybox.draw(),this.terrainPrg.use(),this.terrainPrg.style({waterRadius:90,terrainHeight:20}),c.a.draw(this.terrainPlane)}render(){c.a.clear(),this._relectionFbo.bind(),c.a.clear(0,0,0),this.orbital.flipY(),this._renderScene(),this._relectionFbo.unbind(),this.orbital.flipY(),this.frameBufferGUI.textureList=[{texture:this._relectionFbo.getTexture(),flipY:!0}],this._renderScene(),this.waterPrg.use();this.waterPrg.style({reflectionTetxture:this._relectionFbo.getTexture(),dudvMap:getAssets.dudvMap,count:performance.now()/1e3*.1,waveStrength:.02,normalMap:getAssets.matchingNormalMap,lightColor:[1,1,1],lightPositon:[10,10,10]}),c.a.draw(this.waterPlane)}}}}]);